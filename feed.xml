<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="https://mikehentges.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://mikehentges.github.io/" rel="alternate" type="text/html" /><updated>2024-01-07T19:49:23-06:00</updated><id>https://mikehentges.github.io/feed.xml</id><title type="html">Michael Hentges Blog</title><subtitle>Blog for Michael Hentges, and Hentges.AI LLC</subtitle><entry><title type="html">Rust’s great error handling capability.</title><link href="https://mikehentges.github.io/rust-error-handling" rel="alternate" type="text/html" title="Rust’s great error handling capability." /><published>2023-04-09T00:00:00-05:00</published><updated>2023-04-09T00:00:00-05:00</updated><id>https://mikehentges.github.io/Rust-Error-Handling</id><content type="html" xml:base="https://mikehentges.github.io/rust-error-handling">&lt;p&gt;Handling errors is hard, but Rust’s error-handling capabilities give developers great tools for the job. Handling errors well is one of the key differences between great developers and average ones. Every developer desires solid, robust code that does its job and doesn’t crash – and is easy to maintain. The language designers of Rust have provided unique means of defining and handling errors fundamentally different from the programming languages that preceded it – and is a key contributor to why developers have continuously voted Rust the “most loved language” on Stack Overflow’s yearly developer survey. This article will examine the differences between Rust language’s error-handling mechanisms and prior programming languages and how Rust’s approach is better.&lt;/p&gt;

&lt;h2 id=&quot;in-the-beginning&quot;&gt;In the beginning&lt;/h2&gt;

&lt;p&gt;The C programming language was introduced in the 1970s and became the first widely popular coding language. But its error-handling mechanisms are rudimentary. The following is very typical and idiomatic C code for reading from a file:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;FILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;filename&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// do something with buff&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What’s surprising about this code (at least to non-C developers) is that &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;fread()&lt;/code&gt; does not return a &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;bool&lt;/code&gt; value – it returns a value of type &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;size_t&lt;/code&gt; (or &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;int&lt;/code&gt;), which is the number of bytes read. The rules of C state that the integer value 0 is treated as false; anything else is true. So our loop keeps going as long as the &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;fread()&lt;/code&gt; function returns some bytes. When a zero is returned, either an error happened or we’ve reached the end of the file.&lt;/p&gt;

&lt;p&gt;This pattern of intermixing valid return values with error codes is pervasive in C and in most other programming languages where a function can only return a single value. C has a global ERRNO value that may have more information about what went wrong, but in general, you don’t get a lot of extra data about what kind of error occurred. When you can only return one value from a function and want the function to return useful data, you must mix error codes with the return values. This can cause problems – the return value must be something that is not in the set of valid values. We see -1 and 0 used as “magical error return values” in many functions to indicate an error has occurred.&lt;/p&gt;

&lt;h2 id=&quot;structured-error-handling&quot;&gt;Structured Error Handling&lt;/h2&gt;

&lt;p&gt;To do better, C++ (and later, Java) introduced structured error handling – the try/catch/throw mechanism that allowed errors to be triggered in one place, have additional data attached to the error, and differentiate between different kinds of errors.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call_a_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;inside of my function&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;some error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;we will not get this far&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;my_answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call_a_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;An error has occurred: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;my_answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;My answer is: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;World&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;inside&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;An&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;occurred&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;My&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While exception handling did allow for cleanly separating errors from valid return values, this approach has fundamental problems. People have written lengthy arguments about the issues with structured error handling (&lt;a href=&quot;https://www.lighterra.com/papers/exceptionsharmful/&quot;&gt;Exception Handling Considered Harmful&lt;/a&gt;, for example). The main drawback with exception handling is that it introduces an alternate flow path for a program that is hard to see as a developer, much less control. When the exception is thrown, we do not know who will catch it – it could be several functions up the call stack. Also, a function catching an exception might be surprised by who threw the exception – we cannot choose which functions we want to catch exceptions from – anything that runs underneath our called function is possible.&lt;/p&gt;

&lt;p&gt;Exception handling also introduces problems in multi-threaded applications – separating exception handling across threads is difficult. Java’s requirement that any function that could throw an exception list the exceptions in its method definition is also repetitive and verbose.&lt;/p&gt;

&lt;p&gt;Structured error handling is not meant for “normal” error conditions – it is meant for errors that disrupt an application’s normal flow, not routine return values from a function. A string find operation that returns the position of a character inside of a string wouldn’t throw an exception if it can’t find the intended character – it would instead return some “not found” result. The C function &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;strchr()&lt;/code&gt; does this – it returns either a pointer to the character found or the magical value &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;null&lt;/code&gt;, indicating failure. You wouldn’t expect this function to throw an exception if it can’t find a character. Exception handling only attempts to solve part of the problem of returning error conditions out of functions.&lt;/p&gt;

&lt;h2 id=&quot;a-different-approach&quot;&gt;A Different approach&lt;/h2&gt;

&lt;p&gt;Go took a novel approach – it allows functions to return multiple values instead of one. You will frequently see the following in Golang code:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;return_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here both the error code and the value you need are returned from a function – they do not try to occupy the same spot. But, the error value placeholder is present when an error does not occur. It’s up to the programmer to check the error value, and &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;if err != nil&lt;/code&gt; statements are littered throughout Go code. But sometimes you don’t want to deal with the error – there’s nothing useful to do – and you want to return it from your function. There is a significant amount of boilerplate error-handling code in Go programs to check for errors on each function call in an application, as there is no other way to handle the error.&lt;/p&gt;

&lt;h2 id=&quot;rusts-approach&quot;&gt;Rust’s approach&lt;/h2&gt;

&lt;p&gt;Rust has a novel approach to error handling that leverages Rust’s enumerations. Enumerations in Rust are algebraic data types – they support data values, not just constants. Two special-purpose enumerations are commonly used to handle return values: &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;Option&lt;/code&gt; and &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;Result&lt;/code&gt;. &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;Option&lt;/code&gt; is used when a function may or may not return a useful value – you get a &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;Some(value)&lt;/code&gt; or &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;None&lt;/code&gt; as your values. Using our find a character in a string example, the Rust function &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;find&lt;/code&gt; returns an &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;Option&lt;/code&gt; enumeration – it will have a value of &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;Some(x)&lt;/code&gt; with &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;x&lt;/code&gt; being the character’s position or a value of &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;None&lt;/code&gt;. You can use Rust’s pattern-matching mechanism to handle these conditions elegantly:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;testing&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_string&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I found the character at position: {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I did not find the character&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we have a precise mechanism for knowing if the function returned a valid value or did not work. You do not have to check for a magical “error value”; the enumeration allows the result to be separate from the error condition.&lt;/p&gt;

&lt;p&gt;Rust’s pattern-matching rules require that your code handle both cases of the enumeration – you can’t silently skip error handling as the compiler enforces it. But Rust has a &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;?&lt;/code&gt; operator that allows you to stop and return &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;None&lt;/code&gt; if that’s what comes back from a function. The following 2 code snippets are identical in function:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;string_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;testing&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_string&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I found the character at position: {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;string_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;testing&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_string&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I found the character at position: {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;?&lt;/code&gt; operator “unwraps” the &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;Option&lt;/code&gt;, pulling the value out or returning from the calling function the value &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;None&lt;/code&gt; if it is not there. Note that we are not bypassing the error handling – it is still occurring, and the Rust compiler does it for us automatically. This is very clean and does not clutter the code – making it easier to follow the flow of the function.&lt;/p&gt;

&lt;p&gt;The second enumeration used in error handling is &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;Result&lt;/code&gt;. The two possible values of Result are &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;Ok(T)&lt;/code&gt; and &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;Err(E)&lt;/code&gt;. Here we are returning an error value, and not a plain &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;None&lt;/code&gt; so that we can pass more information back to the calling function when there is an error. Here is an example function that is reading a file, where it returns an error back to the calling function if the file does not exist or there is some other type of error reading the file:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes_read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_file&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.read_to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;format!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;read {} bytes, string is:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, our function returns a &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;Result&lt;/code&gt;, which will contain either a &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;String&lt;/code&gt; value or an error of type &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;Error&lt;/code&gt;. We again use the &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;?&lt;/code&gt; operator on the &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;read_to_string()&lt;/code&gt; function, which unwraps the number of bytes read on a successful return; otherwise, it returns an &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;Err&lt;/code&gt; to the calling function. We print out the number of bytes read and the content of our data file on a successful read. A simple &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;main()&lt;/code&gt; that calls this function could look like this:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;result: &amp;lt;{}&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;eprintln!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;error of: {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When we run our program and have a valid data.txt file, we can see the following output:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;% cargo run
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/rust_examples`
result: &lt;span class=&quot;nt&quot;&gt;&amp;lt;read&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;65&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;is:&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;file.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Here&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data.&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When the data file does not exist, here is what our output looks like:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;% cargo run
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/rust_examples`
error of: No such file or directory (os error 2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We see that a complete error was propagated back to our main function, where we captured it in our match statement and could print it out to the console.&lt;/p&gt;

&lt;p&gt;Our simple examples demonstrate how Rust’s error handling enables cleaner code, where an application can elegantly handle the various conditions that calling an external function might produce. The &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;?&lt;/code&gt; operator with the &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;Option&lt;/code&gt; and &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;Result&lt;/code&gt; enumerations allows for a very clean means of testing for errors, handling them appropriately, and not relying on mixing valid values and error codes. An ability to attach meaningful data to error conditions makes for more robust APIs.&lt;/p&gt;

&lt;h2 id=&quot;but-theres-more&quot;&gt;But there’s more!&lt;/h2&gt;

&lt;p&gt;Rust’s standard libraries have a host of specific functions for managing error states and mapping library errors into user-defined values. External libraries like the &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;thiserror&lt;/code&gt; crate extend Rust’s standard error handling. The &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;thiserror&lt;/code&gt; crate provides an easy-to-use means of defining specific errors that look and feel exactly like the built-in error types that Rust defines: (example derived from &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;thiserror&lt;/code&gt; on &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;docs.rs&lt;/code&gt;)&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;thiserror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[derive(Error,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Debug)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataStoreError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[error(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data store disconnected&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Disconnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;#[from]&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[error(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;the data for key `{0}` is not available&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Redaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[error(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;invalid header (expected {expected:?}, found {found:?})&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;InvalidHeader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[error(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;unknown data store error&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Unknown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;anyhow&lt;/code&gt; crate defines a flexible means of handling multiple error types and adding application-specific data to errors. Anyhow allows for &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;Result&lt;span class=&quot;nt&quot;&gt;&amp;lt;T&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;anyhow::Error&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;, or equivalently &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;anyhow::Result&lt;span class=&quot;nt&quot;&gt;&amp;lt;T&amp;gt;&lt;/span&gt;&lt;/code&gt;, as the function’s return type. A function can then return any error type that implements the &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;std::error::Error&lt;/code&gt; trait. (example derived from &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;anyhow&lt;/code&gt; on &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;docs.rs&lt;/code&gt;)&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;anyhow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_cluster_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClusterMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// plain return of an error, here likely related to file system errors&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read_to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cluster.json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;// return of an error with context&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClusterMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;serde_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deserialization&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.json&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;likely&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatted&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;correctly&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;in-summary&quot;&gt;In summary&lt;/h2&gt;

&lt;p&gt;Our simple examples show how Rust’s error handling significantly differs from prior common programming languages. Rust provides a clean means of separating good vs. bad results from functions without introducing boilerplate that litters our source code. And we have the tools needed to define new error types that work cleanly within our library or application.&lt;/p&gt;

&lt;p&gt;Designing appropriate error handling is still hard – but Rust at least gives us the tools to do a good job of it! And this is more than aesthetics – better error handling allows errors to be more visible in an application and decreases application defects due to not handling error conditions correctly. It also contributes to cleaner and simpler designs – by definition, better designs – which make applications more robust and easier to develop correctly. This is a solid contributor to the Rust programming language’s high interest and “love” from developers!&lt;/p&gt;</content><author><name></name></author><category term="programming" /><summary type="html">Handling errors is hard, but Rust’s error-handling capabilities give developers great tools for the job. Handling errors well is one of the key differences between great developers and average ones. Every developer desires solid, robust code that does its job and doesn’t crash – and is easy to maintain. The language designers of Rust have provided unique means of defining and handling errors fundamentally different from the programming languages that preceded it – and is a key contributor to why developers have continuously voted Rust the “most loved language” on Stack Overflow’s yearly developer survey. This article will examine the differences between Rust language’s error-handling mechanisms and prior programming languages and how Rust’s approach is better.</summary></entry><entry><title type="html">Rust, Lambda, and DynamoDB</title><link href="https://mikehentges.github.io/use-rust-to-build-lambda" rel="alternate" type="text/html" title="Rust, Lambda, and DynamoDB" /><published>2022-11-18T00:00:00-06:00</published><updated>2022-11-18T00:00:00-06:00</updated><id>https://mikehentges.github.io/Use-Rust-to-Build-Lambda</id><content type="html" xml:base="https://mikehentges.github.io/use-rust-to-build-lambda">&lt;p&gt;As part of my journey to learn more about Rust development, I developed a Lambda service hosted on AWS that writes to a DynamoDB database and an associated Rust HTTP client. Along with Rust, I used Terraform to manage the deployment of the AWS resources. This article is the 4th I’ve written on my Wireless Thermostat application that runs on a Raspberry Pi. You can find the others here: &lt;a href=&quot;https://medium.com/@mikehentges65/raspberry-pi-wireless-thermostat-in-rust-45a5d35196cf&quot;&gt;Raspberry Pi Wireless Thermostat - in Rust&lt;/a&gt;, &lt;a href=&quot;https://medium.com/@mikehentges65/rust-cross-compiling-made-easy-e30fcb233fef&quot;&gt;Rust Cross Compiling Made Easy&lt;/a&gt;, and &lt;a href=&quot;https://betterprogramming.pub/easy-multi-threaded-shared-memory-in-rust-57344e9e8b97&quot;&gt;Implementing Multi-Threaded Shared Memory in Rust&lt;/a&gt;. We are going to cover the following in this article:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Define a JSON API as a separate crate shared across two related projects.&lt;/li&gt;
  &lt;li&gt;Write an AWS Lambda function in Rust, using the AWS Rust SDK, that accepts an HTTP POST with a JSON payload of data, and writes the data to a DynamoDB database.&lt;/li&gt;
  &lt;li&gt;Use Terraform to define and build the database, the lambda function, and the permissions glue required to have all the pieces fit together.&lt;/li&gt;
  &lt;li&gt;Use the AWS CLI to deploy Lambda application executable updates.&lt;/li&gt;
  &lt;li&gt;Write a Rust HTTP Client that sends the data to our Lambda function.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I assume you have the &lt;a href=&quot;https://aws.amazon.com/cli/&quot;&gt;AWS CLI&lt;/a&gt;, &lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt;, and &lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;Rust&lt;/a&gt; installed on your system, and your AWS account is set up and connected to the CLI. It’s a bit of work, but easy to follow under each system’s documentation.&lt;/p&gt;

&lt;p&gt;The use case for my application is to keep track of my Raspberry Pi thermostat application’s status and record history. A Rust application running on a Raspberry Pi will push information to a cloud database. With activity data in a cloud database, monitoring the application’s health can be done by examining the data – and avoiding having to open firewalls to let in outside observers. I also get a data source for history, which I can graph on a UI later.&lt;/p&gt;

&lt;p&gt;I picked &lt;a href=&quot;https://aws.amazon.com/dynamodb/&quot;&gt;DynamoDB on AWS&lt;/a&gt; as the database platform. My data needs fit easily inside DynamoDB’s free tier, and DynamoDB is an effective place to push IoT time series data. Instead of directly connecting the Pi application to the Dynamo database, I chose an HTTP-based service layer for the interface between the Raspberry PI and AWS. I’ve found HTTP services to be more resilient than direct DB connections – HTTP’s stateless nature makes it self-correcting across network outages. Pushing data through to a DB is an excellent job for a Lambda function – and with AWS recently publishing a Rust SDK, I took the opportunity to build out the Lambda function as a Rust application. Here’s a picture of how the pieces fit together that we are going to examine:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;https://res.cloudinary.com/dbzsk4ytb/image/upload/v1668802179/blog-images/Rust-Lambda/AWS-Lambda-Rust.drawio2_nedddz.png&quot; alt=&quot;lambda architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are three main parts to the application. First, the main application is thermostat_pi, the client that creates the data we move to the database. Under this project is the Lambda function project, named push_temp. Lastly, the temp_data project holds a definition of a data transport API. All three projects are on GitHub under the thermostat_pi application.&lt;/p&gt;

&lt;p&gt;In temp_data, I started with a Rust struct that holds the data pieces for the thermostat application and enabled serde for JSON representation:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;serde&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Deserialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;serde&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[derive(Debug,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Serialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TempData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thermostat_on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temperature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thermostat_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I created this in a separate Rust crate so that it could be shared with both the Pi application and lambda function projects – ensuring both always were in sync. The Cargo.toml looks like this:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;[package]
name = &quot;temp-data&quot;
version = &quot;0.1.0&quot;
edition = &quot;2021&quot;
license = &quot;MIT&quot;

[dependencies]
serde = {version = &quot;1&quot;, features = [&quot;derive&quot;]}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I then defined a corresponding DynamoDB database to hold this information. I decided on a Partition Key of “day” for the time-series data, which allows for retrieving a day’s worth of data without scanning the entire table. I also created a sort key for the date/time. This key structure will allow efficient read access to the data when I want to set up an alarm or graph historical data. I don’t have much experience with DynamoDB, so there could be a more efficient way to solve this problem – but what I have works for me. Here’s what the DynamoDB table will look like when we are finished:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;https://res.cloudinary.com/dbzsk4ytb/image/upload/v1668802197/blog-images/Rust-Lambda/DynamoDB_data_zforiq.png&quot; alt=&quot;DynamoDB table&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Record_Day and Record_Date keys are strings to DynamoDB. The Record_Date format is RFC3339, which the Rust standard time package supports. It creates a string that can sort the time values correctly by alphabetical sorting. 
Next, we build the lambda function to take our incoming request and store it in the DynamoDB table. The push-temp directory of my main project (GitHub link) is where this lives. The Cargo.toml contains these entries:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;[package]
name = &quot;push_temp&quot;
version = &quot;0.1.0&quot;
edition = &quot;2021&quot;
license = &quot;MIT OR Apache-2.0&quot;

[dependencies]
aws-config = &quot;0.51.0&quot;
aws-sdk-dynamodb = &quot;0.21.0&quot;
log = &quot;0.4.14&quot;
serde = {version = &quot;1&quot;, features = [&quot;derive&quot;]}
tokio = &quot;1.16.1&quot;
tracing-subscriber = { version = &quot;0.3&quot;, features = [&quot;env-filter&quot;] }
lambda_http = &quot;0.7&quot;
serde_json = &quot;1.0.78&quot;

# Our package that defines the struct of the incoming request
temp-data = { path=&quot;../temp-data&quot; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are using the &lt;a href=&quot;https://docs.aws.amazon.com/sdk-for-rust/&quot;&gt;AWS SDK for Rust&lt;/a&gt;. I put all the Rust code in the main.rs file for our lambda function. First, there is some boilerplate to import our message struct, define our response types, and get the Lambda environment set up:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;use aws_sdk_dynamodb::model::AttributeValue;
use aws_sdk_dynamodb::Client;
use lambda_http::{lambda_runtime::Error, service_fn, IntoResponse, Request};

extern crate temp_data;
use temp_data::TempData;

use log::{debug, error};
use serde::Serialize;

#[derive(Debug, Serialize)]
struct SuccessResponse {
    pub body: String,
}

#[derive(Debug, Serialize)]
struct FailureResponse {
    pub body: String,
}

// Implement Display for the Failure response so that we can then implement Error.
impl std::fmt::Display for FailureResponse {
    fn fmt(&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;self, f: &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;mut std::fmt::Formatter&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; std::fmt::Result {
        write!(f, &quot;{}&quot;, self.body)
    }
}

impl std::error::Error for FailureResponse {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The main() function registers an event handler for the incoming event; our handler function is named “my_handler”:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;#[tokio::main]
async fn main() -&amp;gt; Result&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; {
    tracing_subscriber::fmt::init();
    debug!(&quot;logger has been set up&quot;);

    lambda_http::run(service_fn(my_handler)).await?;

    Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our my_handler() function will run when an incoming request arrives. Our my_handler() function needs to do a couple of things. First, it grabs the incoming JSON from the request and parses it into our struct, request_struct. Notice that if the JSON parsing fails, an error value returns at this point.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;async fn my_handler(request: Request) -&amp;gt; Result&lt;span class=&quot;nt&quot;&gt;&amp;lt;impl&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;IntoResponse&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; {
    debug!(&quot;handling a request, Request is: {:?}&quot;, request);

    let request_json = match request.body() {
        lambda_http::Body::Text(json_string) =&amp;gt; json_string,
        _ =&amp;gt; &quot;&quot;,
    };
    debug!(&quot;Request JSON is : {:?}&quot;, request_json);
    let request_struct: TempData = serde_json::from_str(request_json)?;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, we need to push this struct into our DynamoDB table. I’m choosing to separate each data element into its own DynamoDB attribute instead of storing the JSON directly. We do some minor data formatting to pull out the day as a separate attribute to use as our Partition Key. The rest of the struct values convert into AttributeValues for the Dynamo DB API. Our error handling hides DynamoDB-specific error messages from the end user as an implementation detail.&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;    // set up as a DynamoDB client
    let config = aws_config::load_from_env().await;
    let client = Client::new(&lt;span class=&quot;ni&quot;&gt;&amp;amp;config);&lt;/span&gt;

    // build the values that are stored in the DB
    let record_date_av = AttributeValue::S(request_struct.record_date.clone());
    let thermostat_on_av = AttributeValue::S(request_struct.thermostat_on.to_string());
    let temperature_av = AttributeValue::N(request_struct.temperature.to_string());
    let thermostat_value_av = AttributeValue::N(request_struct.thermostat_value.to_string());
    let record_day_av: AttributeValue = AttributeValue::S(request_struct.record_date[..10].to_string());

    // Store our data in the DB
    let _resp = client
        .put_item()
        .table_name(&quot;Shop_Thermostat&quot;)
        .item(&quot;Record_Day&quot;, record_day_av)
        .item(&quot;Record_Date&quot;, record_date_av)
        .item(&quot;Thermostat_On&quot;, thermostat_on_av)
        .item(&quot;Temperature&quot;, temperature_av)
        .item(&quot;Thermostat_Value&quot;, thermostat_value_av)
        .send()
        .await
        .map_err(|err| {
            error!(&quot;failed to put item in Shop_Thermostat, error: {}&quot;, err);
            FailureResponse {
                body: &quot;The lambda encountered an error and your message was not saved&quot;.to_owned(),
            }
        })?;

    debug! {
        &quot;Successfully stored item {:?}&quot;, &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;request_struct
    }

    Ok(&quot;the lambda was successful&quot;.to_string())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To deploy our custom Lambda function to AWS, we need to create an executable called “bootstrap.” We need Rust to build our executable by cross-compiling to the x86_64-unknown-linux-musl target – which is what the Lambda run time requires. I like using &lt;a href=&quot;https://github.com/casey/just&quot;&gt;just&lt;/a&gt; as a command runner and created a simple &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;justfile&lt;/code&gt; for the build, which runs the two commands we need to produce the executable called “bootstrap” in our local directory. I use the &lt;a href=&quot;https://github.com/cross-rs/cross&quot;&gt;cross tool&lt;/a&gt; (cargo install cross), which pulls down a Docker container for the cross-compile environment. The &lt;a href=&quot;https://docs.aws.amazon.com/sdk-for-rust/latest/dg/lambda.html&quot;&gt;AWS SDK&lt;/a&gt; documents alternatives to cross if you don’t want to use a local docker container. Finally, we copy the produced executable to the magic file name of “bootstrap” and store it in our project root.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;build: 
    cross build --release --target x86_64-unknown-linux-musl
    cp target/x86_64-unknown-linux-musl/release/push_temp bootstrap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We could manually deploy our Lambda function by zipping up the bootstrap file and uploading it through the AWS web interface. But other AWS pieces need to go around the Lambda function for everything to work. We need to set up permissions for the Lambda function to insert data into our DynamoDB tables and permissions for executing the Lambda function itself.&lt;/p&gt;

&lt;p&gt;Recently, AWS has published a means to create a &lt;a href=&quot;https://docs.aws.amazon.com/lambda/latest/dg/lambda-urls.html&quot;&gt;Lambda Function URL&lt;/a&gt; – an HTTPS endpoint directly connected to a Lambda function. For simple use cases like ours, a Lambda Function URL allows for a simpler setup and avoids having to create an API gateway endpoint. If an API gateway endpoint is important to you, I’d suggest reading &lt;a href=&quot;https://medium.com/aws-tip/crud-operations-with-rust-on-aws-lambda-part-2-bd1feae2554b&quot;&gt;this article&lt;/a&gt; which includes the additional steps needed. My approach is a simplified version of the one described.&lt;/p&gt;

&lt;p&gt;We could use the AWS console to create our Lambda Function, Function URL, and DynamoDB– but it’s not very repeatable. Instead, let’s use Terraform to define the pieces we need to have a repeatable process. It also gives us a clean way to delete everything when we want to do that. I split up the Terraform configuration into a set of files for each piece of our deployment, all located in the root of the push_temp crate. First, a variables.tf file will define a couple of shared values we’ll need:&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;# Input variable definitions, adjust for your needs

variable &quot;aws_region&quot; {
  description = &quot;AWS region for all resources.&quot;

  type    = string
  default = &quot;us-east-2&quot;
}

variable &quot;push_temp_bin_path&quot; {
  description = &quot;The binary path for the lambda.&quot;

  type    = string
  default = &quot;./bootstrap&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, a main.tf file sets up our environment:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;terraform {
  required_providers {
    aws = {
      source  = &quot;hashicorp/aws&quot;
      version = &quot;~&amp;gt; 4.0&quot;
    }
    archive = {
      source  = &quot;hashicorp/archive&quot;
      version = &quot;~&amp;gt; 2.2.0&quot;
    }
  }

  required_version = &quot;~&amp;gt; 1.0&quot;

  }
}

provider &quot;aws&quot; {
  region = var.aws_region
}

data &quot;aws_caller_identity&quot; &quot;current&quot; {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can set up each of the resources we need to deploy. First, we create the DynamoDB table. Note that we define the two columns we use as keys, and the rest get dynamically created as we insert data. Our keys are strings, so we use the type = “S” to define them. We initialize the table at the lowest possible resource usage, as we have a single little Raspberry Pi sending us data.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;# aws_dynamodb_table.shop-thermostat-table:
resource &quot;aws_dynamodb_table&quot; &quot;shop-thermostat-table&quot; {
  hash_key       = &quot;Record_Day&quot;
  name           = &quot;Shop_Thermostat&quot;
  range_key      = &quot;Record_Date&quot;
  billing_mode   = &quot;PAY_PER_REQUEST&quot;
  read_capacity  = 0
  write_capacity = 0

  attribute {
    name = &quot;Record_Day&quot;
    type = &quot;S&quot;
  }
  attribute {
    name = &quot;Record_Date&quot;
    type = &quot;S&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, we can define our lambda function. We need to provide the .zip file of our executable to Terraform for the initial deployment to set up the Lambda function. I don’t want to use Terraform to deploy our executable on every application change – Terraform is not a CI/CD tool. But we need something to create the function. So after the resources are all created successfully, we will use a different method to deploy application updates.&lt;/p&gt;

&lt;p&gt;We also set up a Lambda Function URL as the publicly reachable endpoint.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;# PUSH TEMP
# Here we grab the compiled executable and use the archive_file package
# to convert it into the .zip file we need.
data &quot;archive_file&quot; &quot;push_temp_lambda_archive&quot; {
  type = &quot;zip&quot;

  source_file = var.push_temp_bin_path
  output_path = &quot;bootstrap.zip&quot;
}

# Here we set up an IAM role for our Lambda function
resource &quot;aws_iam_role&quot; &quot;push_temp_lambda_execution_role&quot; {
  assume_role_policy = &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EOF&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Version&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;2012&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;-10-17&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;,&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Statement&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sts:AssumeRole&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;,&lt;/span&gt;
      &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Principal&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lambda.amazonaws.com&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;err&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Effect&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Allow&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;,&lt;/span&gt;
      &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Sid&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;EOF&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Here&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;attach&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;permission&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;our&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;aws_iam_role_policy_attachment&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push_temp_lambda_execution_policy&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;role       = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;aws_iam_role.push_temp_lambda_execution_role.name&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;policy_arn = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole&quot;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Here&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;definition&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;our&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;function&lt;/span&gt; 
&lt;span class=&quot;na&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;aws_lambda_function&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push_temp_lambda&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;function_name = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PushTemp&quot;&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;source_code_hash = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;data.archive_file.push_temp_lambda_archive.output_base64sha256&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;filename         = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;data.archive_file.push_temp_lambda_archive.output_path&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;handler = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;func&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;runtime = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;provided&quot;&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;here&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enable&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;logging&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;our&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Rust&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run-time&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;environment.&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;We&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;would&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;change&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;something&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;less&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;verbose&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;production.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;variables = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUST_LOG&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;#This&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;attaches&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;defined&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;above&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;function&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;role = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;aws_iam_role.push_temp_lambda_execution_role.arn&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; DynamoDB policies to the lambda execution role
resource &quot;aws_iam_role_policy&quot; &quot;write_db_policy&quot; {
  name = &quot;lambda_write_db_policy&quot;
  role = aws_iam_role.push_temp_lambda_execution_role.name

  policy = &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EOF&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Version&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;2012&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;-10-17&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;,&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Statement&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Sid&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&quot;,&lt;/span&gt;
      &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dynamodb:PutItem&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;err&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Effect&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Allow&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;,&lt;/span&gt;
      &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;arn:aws:dynamodb:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;var.aws_region&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data.aws_caller_identity.current.account_id&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;:table&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Shop_Thermostat&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;EOF&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Function&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;allows&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;direct&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;access&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;our&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;function&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;aws_lambda_function_url&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push_temp_function&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;function_name      = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;aws_lambda_function.push_temp_lambda.function_name&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;authorization_type = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;NONE&quot;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lastly, we create an output file so we can get the API endpoint for calling our function:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;# Output value definitions

output &quot;invoke_url&quot; {
  value = aws_lambda_function_url.push_temp_function.function_url
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Whew, that’s all done! A &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;terraform init &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt; terraform apply&lt;/code&gt; will create all the stuff, upload our newly compiled function, and make it ready for testing! 
We can call the external endpoint through curl, replacing &amp;lt; endpoint &amp;gt; below with the value that terraform outputs on the apply.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;curl -X POST https://&lt;span class=&quot;nt&quot;&gt;&amp;lt;endpoint&amp;gt;&lt;/span&gt;.lambda-url.us-east-2.on.aws/ \
-H 'Content-Type: application/json' \
-d '{&quot;record_date&quot;:&quot;2022-02-03T13:22:22&quot;,&quot;thermostat_on&quot;:true,&quot;temperature&quot;:&quot;65&quot;,&quot;thermostat_value&quot;:&quot;64&quot;}'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can use the DynamoDB console to see your new record in the database:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;https://res.cloudinary.com/dbzsk4ytb/image/upload/v1668802192/blog-images/Rust-Lambda/Dynamo_DB_test_result_qb15dm.png&quot; alt=&quot;DynamoDB table result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To make application updates to the code after the initial deployment, I created a deploy target in my justfile for the commands needed to deploy an updated application. These commands rely on the AWS CLI to be installed and configured for the same region as the Lambda function.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;deploy: build
    cp target/x86_64-unknown-linux-musl/release/push_temp bootstrap
    zip bootstrap.zip bootstrap
    aws lambda update-function-code --function-name PushTemp --zip-file fileb://./bootstrap.zip 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that we have a working back-end that can accept an HTTP Post with our JSON data and persist it in DynamoDB, we can create a Rust front-end that sends that request. Our Cargo.toml in the main application again has a reference to our shared TempData crate so that we can use the shared struct.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;[dependencies]
temp-data = { path=&quot;temp-data&quot; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I created a function store_temp_data() to use whenever new data is available within the Rust application. I pass in the data and the endpoint URL, which is in the run-time configuration elsewhere. I’m using the reqwest crate for the base HTTP client. Our function starts by initializing the client and building the request structure TempData we saw earlier. We also grab the current time and convert it to the RFC3339 format.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;use reqwest;
use reqwest::Error;
use time::format_description::well_known::Rfc3339;
use time::macros::offset;
use time::OffsetDateTime;

extern crate temp_data;
use temp_data::TempData;

pub async fn store_temp_data(
    thermostat_on: bool, 
    current_temp: f32,
    thermostat_value: i16,
    aws_url: &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;str,
) -&amp;gt; Result&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; {

    let client = reqwest::Client::new();

    // Get the current time, offset to my timezone
    let now = OffsetDateTime::now_utc().to_offset(offset!(-6));
    let now = now.format(&lt;span class=&quot;ni&quot;&gt;&amp;amp;Rfc3339).unwrap();&lt;/span&gt;

    let body = TempData {
        record_date: now,
        thermostat_on: thermostat_on,
        temperature: current_temp
        thermostat_value: thermostat_value
    };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, we send the request to our endpoint, serializing it into JSON along the way, and handle the response. I’m choosing to log the error and return OK on an error, as this is a non-critical function for our application.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;    let response = client
        .post(aws_url)
        .json(&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;body)
        .send()
        .await;

    match response {
        Ok(r) =&amp;gt; {
            tracing::debug!(&quot;response: {:?}&quot;, r);
        }
        Err(e) =&amp;gt; {
            tracing::error!(&quot;Error sending to AWS, {}&quot;, e);
        }
    }

    Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And that’s it! For the five things we set out to accomplish, here are our key takeaways:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We are defining the TempData struct in a separate crate (directory) with its own Cargo.toml giving us a common referenceable structure for the API between our client and server applications. Utilizing the struct to define a JSON-based interface between the client and server, and using serde to serialize and deserialize our TempData structure on either end, is simple to set up and keep in sync across our projects.&lt;/li&gt;
  &lt;li&gt;The AWS Rust SDK provides easy-to-use interfaces for Rust for Lambda definition and DynamoDB access. Rust makes for a great Labmda execution environment, with its speed and low memory footprint.&lt;/li&gt;
  &lt;li&gt;Terraform works great to build out all of the AWS components we need and set up the permissions pieces required to glue everything together.&lt;/li&gt;
  &lt;li&gt;Using the AWS CLI is an easy way to update our Lambda executable on demand.&lt;/li&gt;
  &lt;li&gt;The reqwest crate gives us a straightforward means to send HTTP requests for our client application.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I hope you find this useful on your Rust journey! If you have any improvement ideas, please provide feedback in the comments.&lt;/p&gt;</content><author><name></name></author><category term="programming" /><summary type="html">As part of my journey to learn more about Rust development, I developed a Lambda service hosted on AWS that writes to a DynamoDB database and an associated Rust HTTP client. Along with Rust, I used Terraform to manage the deployment of the AWS resources. This article is the 4th I’ve written on my Wireless Thermostat application that runs on a Raspberry Pi. You can find the others here: Raspberry Pi Wireless Thermostat - in Rust, Rust Cross Compiling Made Easy, and Implementing Multi-Threaded Shared Memory in Rust. We are going to cover the following in this article:</summary></entry><entry><title type="html">Why Rust is so Great – Reason 1, The Borrow Checker</title><link href="https://mikehentges.github.io/why-rust-is-so-great-1" rel="alternate" type="text/html" title="Why Rust is so Great – Reason 1, The Borrow Checker" /><published>2022-11-09T00:00:00-06:00</published><updated>2022-11-09T00:00:00-06:00</updated><id>https://mikehentges.github.io/Why-Rust-Is-So-Great-1</id><content type="html" xml:base="https://mikehentges.github.io/why-rust-is-so-great-1">&lt;p&gt;When I first tripped across Rust, it was through an article touting Rust’s election as the “most loved programming language” for several years in Stack overflow’s yearly survey (https://survey.stackoverflow.co/2022/#technology-most-loved-dreaded-and-wanted).&lt;/p&gt;

&lt;p&gt;The high-level language description was interesting – compiled, no virtual machine, efficient, fast, and safe. I’ll admit a bias towards compiled and type-safe languages – I grew up on C, have taught C, C++, and Java, and have used Java for most of my professional career. Very early in my research, I ran across a bunch of articles of the type “Why Rust is better than &lt;insert programming=&quot;&quot; language=&quot;&quot; here=&quot;&quot;&gt;&quot; and &quot;Why you should learn Rust.&quot; They all seem to have come from the same root source – and mostly cover points that any statically typed language that doesn't run on a virtual machine runtime would have. &quot;Blazingly fast&quot; &quot;catches variable type mismatch at compile time&quot; are examples.&lt;/insert&gt;&lt;/p&gt;

&lt;p&gt;What is missing is an explanation of what is unique to Rust that other languages do not have. I want to tackle the first reason in this article – the Rust Borrow Checker.&lt;/p&gt;

&lt;p&gt;The inventors of Rust benefit from years of practical experience with other programming languages. They have designed a set of features in the language and associated tooling that address many of the pain points facing application developers. First up is memory management – from the beginning, programs have dealt with how to use memory safely, and the Rust Borrow Checker is a novel approach to solving this problem.&lt;/p&gt;

&lt;h2 id=&quot;some-history&quot;&gt;Some history&lt;/h2&gt;

&lt;p&gt;First, let me review some history of how programming languages have tried to tackle this problem. In the beginning, there was C, and the low-level and often-cursed “malloc()” and “free().” C is a programming language that gives developers complete control of their environment – it is a small step up from assembly language. Developers get to fully manage memory access for their application and how to give allocated memory back to the operating system. This low-level control takes a lot of careful planning. But, it was the source of many runtime errors, through either memory leaks (not letting go of memory) or crashes (freeing the same pointer twice or using memory after it is released are common problems). It is also a source of security issues – reading previously freed memory for data you’re not supposed to have is a possible exploit. Here’s an example program that demonstrates what the compiler allows but is incorrect:&lt;/p&gt;

&lt;h3 id=&quot;c-code&quot;&gt;C Code&lt;/h3&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&amp;lt;stdio.h&amp;gt;
#include&amp;lt;stdlib.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get_me_some_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;how_much&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;how_much&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_memory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_me_some_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;my_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;my_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Note, access beyond the end of my allocation&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bad_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Note, access to memory after a free  &lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bad_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Output&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;above&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compiled&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;executed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MacOs&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Same&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compiled&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optimizations&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;turned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ofast&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;C++ enabled better control over memory allocation – classes had constructors that would allocate memory for their objects, and destructors freed that memory. Smart Pointers also were created that helped with automatically freeing memory when variables fell out of scope. But the “foot guns” of low-level pointers and references made errors challenging to eliminate. You were ok if you followed the rules – but if you weren’t aware of the rules, the compiler wasn’t of any help. The hidden complexity inside objects also made it difficult to follow the rules and predict how your application would perform.&lt;/p&gt;

&lt;h2 id=&quot;garbage-collection&quot;&gt;Garbage Collection&lt;/h2&gt;

&lt;p&gt;Programming languages turned to garbage collection as a means to solve these problems. Garbage collection-based programs can grab whatever memory they need from a runtime environment. In the background, the garbage collection process will release memory back to the operating system once the program is no longer using it. Scripting languages that rely on interpreting source code at run time, including Basic, Python, and JavaScript, use this approach in the run time environment of their interpreters. Java was one of the first compiled languages that targeted running within a runtime (the JVM) that performed garbage collection. New programming languages, including Golang (Go) and Dart, utilize Garbage Collection. These environments are productive for developers – it makes managing memory much simpler. Garbage collectors have gotten very sophisticated, and many application types work well in this environment.&lt;/p&gt;

&lt;p&gt;But Garbage Collection imposes limitations. The overhead imposed by the Garbage Collector impacts the application’s runtime behavior. Pauses in the application need to be scheduled, which makes Garbage Collected languages unsuitable for real-time programming. The runtime that goes along with the environment is also typically heavyweight, which gets in the way when running in the small environments of embedded and IoT devices – or containerized microservices. Here’s a quick example java application that is similar to our C version that shows how garbage collection is useful:&lt;/p&gt;

&lt;h3 id=&quot;java-code&quot;&gt;Java Code&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;java_allocation_example&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
        
          &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_memory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_me_some_memory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
          
          &lt;span class=&quot;n&quot;&gt;my_memory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Completely normal and valid&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;my_memory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Note, access beyond the end of my allocation, this blows up in Java&lt;/span&gt;
        
          &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_new_memory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_memory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// I have a new variable - does this get a copy, or does it just&lt;/span&gt;
                                           &lt;span class=&quot;c1&quot;&gt;// point to the original?&lt;/span&gt;

          &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Initial value: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_memory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Still 12, as it should be&lt;/span&gt;

          &lt;span class=&quot;n&quot;&gt;my_new_memory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// using my 2nd variable to update the array&lt;/span&gt;

          &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;New value: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_new_memory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// This prints out &quot;7&quot;, my new value&lt;/span&gt;
          &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Original array: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_memory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// What does this print???&lt;/span&gt;
          
          &lt;span class=&quot;n&quot;&gt;my_memory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Doesn't free anything, but the GC could now reclaim our memory if&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;// it wanted to.&lt;/span&gt;
                            
          &lt;span class=&quot;c1&quot;&gt;//Will cause a null pointer exception.&lt;/span&gt;
          &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Use after null: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_memory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt; 
          
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_me_some_memory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Terminal&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;execution:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java_allocation_example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;main&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ArrayIndexOutOfBoundsException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Index&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java_allocation_example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java_allocation_example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bad&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commented&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;out:&lt;/span&gt;        
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java_allocation_example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Initial&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Original&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;array:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Everything compiles, but we get consistent crashes at run time instead of undefined runtime behavior – that’s good and bad. Predictable behavior is good, but the java “NullPointerException” runtime error has crashed applications in production more times than anyone would want to admit. When we comment out the bad line, we now see a side effect – the new variable did not receive a completely new version of the array; it just “pointed” to the original. When we modified the new variable, the original one had its contents modified out from under it. In this trivial example, we can follow what is happening here – but if that modification occurred deep within a nested library function, we could easily be surprised.&lt;/p&gt;

&lt;p&gt;But, our memory management is more straightforward – we get to request the memory space we need at run time and don’t have to deal with letting it go. The ease of use is why garbage collection is widespread, and mainstream languages JavaScript, Python, Go, and Dart are using it today.&lt;/p&gt;

&lt;h2 id=&quot;what-rust-does-differently&quot;&gt;What Rust does differently&lt;/h2&gt;

&lt;p&gt;Rust’s approach to memory management enables the ease of memory management of a Garbage Collection environment &lt;em&gt;but without the runtime environment overhead or associated performance penalty&lt;/em&gt;. It also solves the unexpected side effect problems we saw in our Java example. A smart pointer-style mechanism is a key – but instead of relying on programmers to follow usage rules (like C++), the compiler enforces access rules. “Fighting the borrow checker” is one of the first things new Rust developers figure out how to do – but once mastered, it enables developers to manage their memory usage automatically.&lt;/p&gt;

&lt;p&gt;Along with a productive development environment, Rust’s borrow checker eliminates a whole class of programming errors related to memory management. Surveys have demonstrated that many of the security vulnerabilities present in applications are due to a program’s inability to protect access to allocated memory. Rust programs run fast, enable developers to be efficient, are more secure, and reduce runtime crashes. Let’s look at a Rust application that mimics our examples:&lt;/p&gt;

&lt;h3 id=&quot;finally---some-rust-code&quot;&gt;Finally - some Rust code!&lt;/h3&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_me_some_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;how_much&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;how_much&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;//Rust fun - can skip the &quot;return&quot; when skipping the trailing ;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_vector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_me_some_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;my_vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Completely normal and valid&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;my_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Going off the deep end of the array - this blows up at&lt;/span&gt;
                       &lt;span class=&quot;c&quot;&gt;// compile time, not run time.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;my_vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// A dynamic vector makes it through a compile, but panics at&lt;/span&gt;
                        &lt;span class=&quot;c&quot;&gt;// run time.&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;some_vector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;//typical assigning to a new variable - or is it?&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Look the vector moved to its new home, everything works&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;some_vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// I can re-assign my value just fine.&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// This doesn't compile - my_vector is no longer valid here&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We again have a function that allocates a block of memory on the heap using Rust’s Vector type. A Vector is a contiguous block of memory that is dynamically sized, accessed like an array, and stored on the heap. By contrast, line 8 allocates an array, which is fixed in size at compile time and allocates on the stack. Since we know the array size at compile time, we get a compiler warning on line 12 – Rust knows that we’re going past the end of the array.&lt;/p&gt;

&lt;h3 id=&quot;rusts-compiler-keeps-us-safe&quot;&gt;Rust’s compiler keeps us safe&lt;/h3&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cargo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;Compiling&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rust_examples&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v0&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.1.0&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;panic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runtime&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.rs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;my_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Going off the end of the array - this blows up &lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;^^^^^^^^^^^^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;but&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;note&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;#[deny(unconditional_panic)]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;could&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rust_examples&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;due&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previous&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;


&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Commenting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cargo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;Compiling&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rust_examples&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v0&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.1.0&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E0382&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;borrow&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moved&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_vector&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.rs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_vector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_me_some_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;-------------&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;occurs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;because&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_vector&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Copy&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;some_vector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;//typical assigning to a new variable - or is it?&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;                   &lt;span class=&quot;o&quot;&gt;---------&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moved&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;here&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// This doesn't compile - my_memory is no longer valid here&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;                     &lt;span class=&quot;o&quot;&gt;^^^^^^^^^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;borrowed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;here&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;move&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;more&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;information&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;about&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rustc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;explain&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E0382&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.
error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;could&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rust_examples&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;due&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previous&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The rust compiler is excellent at giving us meaningful error information. On line 16, the vector is “moved” to a new home – it no longer exists at my_vector. Rust keeps track of the allocated memory but ensures that only one variable “owns” the memory and can make changes.&lt;/p&gt;

&lt;p&gt;We can assign a variable to our vector if we state it is an immutable variable. We can only “read” the values through this new variable, not write to them. Rust enforces a rule that there can only be 1 “writer” / “owner” at a time – that way, it prevents all “whoever saves last wins” errors, the unexpected side effect issues we saw in our Java example. It can also keep track of the variables using the allocated memory to ensure it gets freed when all of the variables using the memory fall out of scope. Here’s our example program with an immutable variable pointing to our vector:&lt;/p&gt;

&lt;h3 id=&quot;updated-listing-showing-borrowing-with-an-immutable-variable&quot;&gt;Updated listing, showing borrowing with an immutable variable&lt;/h3&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_vector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_me_some_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;//let mut my_array: [usize; 50] = [0; 50];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_read_only_pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;//notice no &quot;mut&quot; here, we cannot write values&lt;/span&gt;
                              &lt;span class=&quot;c&quot;&gt;//using this variable, only read them&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;my_vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Completely normal and valid&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;//my_array[55] = 17; // Going off the deep end of the array - this blows up at&lt;/span&gt;
                       &lt;span class=&quot;c&quot;&gt;// compile time&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;my_vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// A dynamic vector makes it through compile, but panics at&lt;/span&gt;
                        &lt;span class=&quot;c&quot;&gt;// run time&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;my_read_only_pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Borrowing access to the vector&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_read_only_pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;some_vector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;//typical assigning to a new variable - or is it?&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Look the vector moved to its new home, everything works&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;some_vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// I can re-assign my value just fine.&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// This doesn't compile - my_memory is no longer valid here&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-magic-of-rusts-borrow-checker-is-this&quot;&gt;The magic of Rust’s borrow checker is this:&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Rust ensures ownership of any memory (heap or stack) is in one place. Only the owner of the data can manipulate it. Multiple read-only access is allowed.&lt;/li&gt;
  &lt;li&gt;Rust keeps track of the memory variables used and automatically frees up memory when all the variables using that memory are out of scope – whether on the stack (our array example) or the heap (our Vector example).&lt;/li&gt;
  &lt;li&gt;Bounds checking is enforced either at compile time (for arrays, which have their sizes determined at compile time) or run time (vectors, which have their sizes set at run time).&lt;/li&gt;
  &lt;li&gt;These rules eliminate a whole class of errors and security vulnerabilities. We can’t write to memory after a free() – Rust keeps memory around for us as long as anything has access. These rules are all checked at compile time. We don’t have to worry about letting go of memory – Rust takes care of that. Boundary checks also prevent us from writing outside of the memory space allocated to us.&lt;/li&gt;
  &lt;li&gt;Most of this happens at compile time – we do not have a runtime garbage collector that has to run alongside us, and there are no interruptions to the program execution to allow a garbage collector to interrogate memory usage. A common Rust saying is: “if it compiles, it will work.”&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Even better, how the borrow checker works enable multiple threads to use allocated memory safely. When programs move into multiple threads of execution, the opportunity for error expands exponentially. “Fearless concurrency” – using data safely across multiple threads automatically – is a significant benefit of Rust’s borrow checker.&lt;/p&gt;

&lt;p&gt;Rust’s memory management and the borrow checker are two main reasons Rust is different. You can access memory at a low level with complete control, without a garbage collector runtime or the risks of a runtime error blowing up your program unexpectedly. This feature makes Rust great for low-level systems, embedded, or real-time applications where efficiency is necessary. It also enables Rust to be used for higher-level applications such as web service publishing, as the “memory automatically frees” environment is productive for developers.&lt;/p&gt;

&lt;p&gt;But that’s not all – follow me to be notified when I publish the next article on another feature of Rust that makes it great!&lt;/p&gt;</content><author><name></name></author><category term="programming" /><summary type="html">When I first tripped across Rust, it was through an article touting Rust’s election as the “most loved programming language” for several years in Stack overflow’s yearly survey (https://survey.stackoverflow.co/2022/#technology-most-loved-dreaded-and-wanted).</summary></entry><entry><title type="html">Easy multi-threaded shared memory in rust</title><link href="https://mikehentges.github.io/easy-multithreaded-shared-memory-in-rust" rel="alternate" type="text/html" title="Easy multi-threaded shared memory in rust" /><published>2022-10-31T00:00:00-05:00</published><updated>2022-10-31T00:00:00-05:00</updated><id>https://mikehentges.github.io/Easy-Multithreaded-Shared-Memory-in-Rust</id><content type="html" xml:base="https://mikehentges.github.io/easy-multithreaded-shared-memory-in-rust">&lt;p&gt;This article is the 3rd in a series related to building a wireless thermostat in Rust, running on a Raspberry Pi –
although this one has very little to do with the Raspberry Pi and is more relevant to any multi-threaded application.
When creating my application, I implemented a simple and effective design for controlling multi-threaded access to
shared memory. You can find the previous articles
here: &lt;a href=&quot;https://mhentges.com/rpi-thermostat&quot;&gt;first article - Raspberry Pi Wireless Thermostat in Rust&lt;/a&gt;
and &lt;a href=&quot;https://mhentges.com/rust-cross-compiling-made-easy&quot;&gt;second article - Cross Compiling Made Easy&lt;/a&gt;. I have a few code
snippets below, but you can find the entire code repository &lt;a href=&quot;https://github.com/mikehentges/thermostat-pi&quot;&gt;on github&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;first-the-back-story&quot;&gt;First, the back story:&lt;/h2&gt;

&lt;p&gt;When designing a multi-threaded application, one of the core considerations is how the different threads share data.
There’s always something that the threads share – you’re spinning off threads to work on a shared problem, after all. If
nothing else, configuration data or database connection pools have to be shared. There are two main ways of approaching
this problem.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Message Passing&lt;/strong&gt; – channels between threads allow data to be sent and received between them. Message passing is
the mechanism that golang prefers, as the golang documentation states: “Do not communicate by sharing memory;
instead, share memory by communicating.” Rust supports creating channels; you can find more information in the Rust
Book’s chapter on &lt;a href=&quot;https://doc.rust-lang.org/book/ch16-02-message-passing.html&quot;&gt;message passing&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Shared-State&lt;/strong&gt; – a set of data identified as a shared state. Each thread access a shared data area through
thread-safe protection mechanisms – typically a Mutex. Locks on the data allow you to access the data safely, reading
or updating the data as needed, and then the lock is released. Only one thread can read or write the data at a time.
The Rust Book’s &lt;a href=&quot;https://doc.rust-lang.org/book/ch16-03-shared-state.html&quot;&gt;shared state&lt;/a&gt; section describes these
mechanisms.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Both approaches work, and Rust has good support for both mechanisms in the standard library. To choose between them,
consider the following.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;What are the access patterns?&lt;/strong&gt; Will threads mainly read data, mostly write data, or both?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;How will deadlock be avoided?&lt;/strong&gt; Avoiding deadlock is a primary concern for multi-threaded applications – nothing is
worse than having a bunch of threads available to do work, and they are all stuck waiting for the other ones to get
out of the way.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Performance.&lt;/strong&gt; While over-engineering for performance is a common fault, having some idea of the performance
requirements of your solution is essential. I’m a big fan of the rule: &lt;em&gt;keep the solution as simple as possible, but
no simpler&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I decided on a shared state approach for the application I am creating. This decision also implied that my worker
threads would work by polling – checking on things periodically instead of receiving an outside message. Here is what
led me to that conclusion.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I have three main threads. One is a web interface that allows for reading/writing of the shared state (get
temperature, get thermostat setting, set thermostat setting). The web interface is, by definition, a creator of
unscheduled activity – things come in based on an external client’s action and are not under the application’s
control. Second, a pair of background worker threads react to the application’s environment. The first reads the
temperature sensor, and the second calculates whether the thermostat should be set on or off and controls the
physical relay to make that happen. The thermostat is in a separate thread, as it could turn on/off when the
temperature crosses a threshold, or we receive a new thermostat setting from the web interface.&lt;/li&gt;
  &lt;li&gt;I didn’t have to worry about contention with only three threads (assuming a single external client on the web
interface). A simple shared state approach wouldn’t run into issues based on too many threads trying to access locks
simultaneously.&lt;/li&gt;
  &lt;li&gt;The logic for determining the thermostat’s state has a time component. We don’t want frequent, short bursts of
on/off, which thrash the furnace. We enforce a minimum amount of time that the thermostat will be on or off before
switching to another state. Accurately reacting to a message (the temperature reading or thermostat value changes)
requires knowing how long it’s been since the thermostat changed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A shared state made sense based on these requirements. My design enforces a low thread count, so contention was not an
issue (a common problem with shared state approaches). I need to keep track of time, so some state data was always
required. Implementing two different state data mechanisms in the same application would be added complexity. With each
thread doing its own thing and getting/setting shared state independently, we isolate each thread from the others. This
choice led to a simpler overall application design.&lt;/p&gt;

&lt;p&gt;But, as I reviewed the Rust Book’s content on &lt;a href=&quot;https://doc.rust-lang.org/book/ch16-03-shared-state.html&quot;&gt;shared-state&lt;/a&gt;,
the complexity of managing access from each thread seemed daunting. Plus, sprinkling thread-locking code in the
application made it a mess – my nice single-purpose functions now had Mutex locking logic. Also, when accessing data
through a Mutex’s lock dealing with Rust’s borrow checker across threads proved challenging.&lt;/p&gt;

&lt;h2 id=&quot;a-simpler-approach&quot;&gt;A simpler approach:&lt;/h2&gt;

&lt;p&gt;To make this manageable, I used an approach I’ve used before on C++ projects – encapsulating the shared data into a
separate class and pushing all Mutex logic into the class. Rust doesn’t have classes, but a couple of structs did the
trick.&lt;/p&gt;

&lt;p&gt;To start, I created a struct to hold all the shared state data in a single place. Then I could deal with a single
reference to this struct instead of managing each data element independently.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SharedData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;continue_background_tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;current_temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;thermostat_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;thermostat_on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;thermostat_change_datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OffsetDateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then we define a struct that holds an Arc pointer – an Atomic Reference Count pointer to a Mutex that guards our shared
data struct. We use this struct to control access to/from our shared data.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AccessSharedData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mutex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SharedData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We will make many copies of this pointer – they all point to our Mutex, which is how we gain access to our shared memory
space. We do this by customizing the Clone() method for AccessSharedData – it looks like the following.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// Clone here makes a copy of the Arc pointer - not  the entire class of data&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// All clones point to the same internal data&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Clone&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AccessSharedData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;AccessSharedData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.sd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To use this, we first create an instance of our SharedData struct (the simple .new() method isn’t shown above but is
straightforward).&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;common_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SharedData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.initial_thermostat_value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.initial_thermostat_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;OffsetDateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UNIX_EPOCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, we initialize an instance of AccessSharedData.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// The wrapper around our shared data that gives it safe access across threads&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AccessSharedData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;common_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We then give each thread we spawn() a cloned copy of the AccessSharedData struct. The clone call creates a copy of the
Arc pointer, which we then move into the new thread. A similar method passes in a clone of the AccessSharedData struct
to the actix_web HttpServer::new() method, so it is also available in HTTP client handlers.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// Create another clone of our pointer to shared data, and send it into a new thread that continuously&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// checks to see how the current temperature and current thermostat setting compare - and will&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// trigger turning on the relay for the furnace as needed.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sdc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sd&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;control_handle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;tracing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kicking off control_thermostat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run_control_thermostat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sdc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.poll_interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;.await&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tracing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;control_thermostat ended&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tracing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;control_thermostat returned an error {:?}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that everyone has a copy of the Arc pointer, we need to create a means to use it to read/write our shared data
struct. A simple set of getters/setters for each member of our struct handles the task of acquiring a lock,
getting/setting the data, and automatically releasing the lock. By putting this logic surrounding the get/set and
utilizing the end of the method as a scope boundary to force the lock to be released, we gain control over the access to
our data.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AccessSharedData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;continue_background_tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.sd&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.continue_background_tasks&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_continue_background_tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.sd&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.continue_background_tasks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;//repeated for remaining struct members&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When each get/set function returns, the lock is released. This approach also means it is impossible to deadlock around
access to the structure – everything is locked and released immediately and prohibits anything else from getting in the
way. With all of our locking mechanisms in place, using the shared data in the rest of our application is trivial.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sd&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.set_current_temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp_f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp_now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sd&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.current_temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thermostat_now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sd&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.thermostat_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;in-summary&quot;&gt;In Summary&lt;/h2&gt;

&lt;p&gt;This strategy is encapsulation at its finest. Application code uses straightforward calls to methods to get/set the
shared data elements whenever needed. Behind the scenes, we manage the Mutex’s locking for that access to be thread-safe
and safe from deadlocks. And Rust’s borrow checker is extremely happy that we aren’t allowing direct shared mutable
references to our shared data. If needed, you could easily extend this design pattern to implement a more robust access
pattern.&lt;/p&gt;

&lt;p&gt;Putting locking logic inside getters/setters enables our shared data struct to hide the complexities of multi-threaded
access – much like the standard library does for thread-safe collections. Using clones of an Arc makes it possible to
acquire a handle to the shared memory struct in each thread. These two concepts are the core ideas that make our Easy
Shared Data design pattern work.&lt;/p&gt;</content><author><name></name></author><category term="programming" /><summary type="html">This article is the 3rd in a series related to building a wireless thermostat in Rust, running on a Raspberry Pi – although this one has very little to do with the Raspberry Pi and is more relevant to any multi-threaded application. When creating my application, I implemented a simple and effective design for controlling multi-threaded access to shared memory. You can find the previous articles here: first article - Raspberry Pi Wireless Thermostat in Rust and second article - Cross Compiling Made Easy. I have a few code snippets below, but you can find the entire code repository on github.</summary></entry><entry><title type="html">Rust Cross Compiling Made Easy</title><link href="https://mikehentges.github.io/rust-cross-compiling-made-easy" rel="alternate" type="text/html" title="Rust Cross Compiling Made Easy" /><published>2022-10-17T00:00:00-05:00</published><updated>2022-10-17T00:00:00-05:00</updated><id>https://mikehentges.github.io/Rust-Cross-Compiling-Made-Easy</id><content type="html" xml:base="https://mikehentges.github.io/rust-cross-compiling-made-easy">&lt;p&gt;This article is the second installment of my series on building a wireless thermostat in Rust for the Raspberry Pi. You can find the &lt;a href=&quot;https://mhentges.com/rpi-thermostat&quot;&gt;beginning of the series here&lt;/a&gt;. All source code for the project is &lt;a href=&quot;https://github.com/mikehentges/thermostat-pi&quot;&gt;located here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As I approached the task of building a native Rust executable for the Raspberry Pi, one of the first things I had to tackle was establishing a cross-compiling development environment. The Raspberry Pi runs a flavor of Unix, but we need to compile executables for the Pi’s ARM processor.&lt;/p&gt;

&lt;p&gt;My first attempt followed the process documented in the Cross-compilation chapter of &lt;a href=&quot;https://rust-lang.github.io/rustup/cross-compilation.html&quot;&gt;The Rustup Book&lt;/a&gt;. I had to find the appropriate target for a Raspberry Pi Zero (my target): &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;arm-unknown-linux-gnueabihf&lt;/code&gt;. This target will be slightly different if you want to target a Pi 3 or Pi 4 – then you can use &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;target=armv7-unknown-linux-gnueabihf&lt;/code&gt;. The Pi Zero runs a v6 version of the ARM processor, larger Pi’s use a v7 (or higher) version.&lt;/p&gt;

&lt;p&gt;Cross-compiling sounded easy, and following the Rustup Book’s directions added cross-compiling to my environment:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;rustup target add arm-unknown-linux-gnueabihf
cargo build –target= arm-unknown-linux-gnueabihf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But that doesn’t work out of the box. Even the documentation warns you: &lt;em&gt;“Note that rustup target add only installs the Rust standard library for a given target. There are typically other tools necessary to cross-compile, particularly a linker.”&lt;/em&gt; Then, my application used SSL – and I also needed a way to cross-compile the openssl library for the Pi. I build under WSL2 (Ubuntu) on a Windows machine – getting this set up would take some effort.&lt;/p&gt;

&lt;p&gt;Fortunately, there’s an easier way! The &lt;a href=&quot;https://github.com/rust-embedded/wg#the-tools-team&quot;&gt;Rust Embedded Devices Tools Team&lt;/a&gt; publishes a set of Docker images that contain a complete toolchain for a large number of cross-compile targets. Even better, they created a “ cross “ tool that automates the entire process of launching a suitable Docker container, getting your code attached to the container, and running the compile process. Incremental builds are fully supported, so cross-compiling does not take much longer than native compiling.&lt;/p&gt;

&lt;p&gt;To set this up, you first to install the “cross” tool:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;cargo install cross
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, compiling any project for a new target is as simple as substituting “cross” for “cargo” in your command. I also had to pass a features flag to get the OpenSSL library built from source for the target platform:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;cross build --release –target=arm-unknown-linux-gnueabihf --features vendored-openssl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That command will build a release executable at &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;./target/arm-unknown-linux-gnueabihf/release/thermostat-pi&lt;/code&gt; (my project is “thermostat-pi”).&lt;/p&gt;

&lt;p&gt;For another part of the project, I needed to cross-compile to x86_64-unknown-linux-musl to create an AWS Lambda using Rust. The &lt;a href=&quot;https://docs.aws.amazon.com/sdk-for-rust/latest/dg/lambda.html&quot;&gt;AWS Rust SDK&lt;/a&gt; documents the steps and includes the “Container approach” that uses cross:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;cross build --release --target x86_64-unknown-linux-musl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can find the lambda project in the ./push_temp folder in the &lt;a href=&quot;https://github.com/mikehentges/thermostat-pi/tree/main/push-temp&quot;&gt;source repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All these build commands are too long for me to remember. Command-line history helps a ton, but returning to the project after an extended break can mean looking up the build commands again. Instead, I recently found &lt;a href=&quot;https://github.com/casey/just&quot;&gt;just&lt;/a&gt;, a lighter-weight version of make that is purpose-built as a command runner. You can create a justfile, using syntax similar to make’s Makefile, to define a set of commands. Dependencies are supported, allowing you to bundle together different commands as needed. For the ./push_temp project, its very simple justfile looks like this:&lt;/p&gt;

&lt;div class=&quot;language-makefile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	cross build &lt;span class=&quot;nt&quot;&gt;--release&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--target&lt;/span&gt; x86_64-unknown-linux-musl
	&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;target/x86_64-unknown-linux-musl/release/push_temp bootstrap
&lt;span class=&quot;nl&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;record_date=2022:02:03T15:50:00&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;thermostat_on=true&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;temperature=55&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;thermostat_value=60&quot;&lt;/span&gt; https://5zvz7wehuh.execute-api.us-east-2.amazonaws.com/test_lambda
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This setup allows a simple ``just build` command – which I can remember! The test target sends a sample transaction to my lambda function – again, keeping in a central place a longer command that I can reuse as needed.&lt;/p&gt;

&lt;p&gt;I also created a justfile to run the cross-compile of the main project and automated the deployment of the executable to the Raspberry Pi. The justfile I created looks like this:&lt;/p&gt;

&lt;div class=&quot;language-makefile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;TARGET_HOST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mhentges@shop-therm.local&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TARGET_PATH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/home/mhentges/thermostat-pi&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TARGET_ARCH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;arm-unknown-linux-gnueabihf&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SOURCE_PATH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./target/&quot;&lt;/span&gt; + TARGET_ARCH + &lt;span class=&quot;s2&quot;&gt;&quot;/release/thermostat-pi&quot;&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;cargo&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;check&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;cross&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;--release&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;--target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--features&lt;/span&gt; vendored-openssl
    &lt;span class=&quot;nl&quot;&gt;rsync ./configuration.yaml &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;/home/mhentges/configuration.yaml&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;rsync  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#ssh -t  
&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;clippy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;cargo&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;clippy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This script relies on SSH being available between your host machine and the PI, configured with &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-configure-ssh-key-based-authentication-on-a-linux-server&quot;&gt;public key authentication&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using the Cross tools is the secret sauce that makes cross-compiling for Rust easy. Whether you use Windows, macOS, Linux, or rent a dev box in the cloud, you can set up the cross-compiling environment with a few simple commands. Then, use just to provide automation to allow for easy-to-execute build and deploy steps.&lt;/p&gt;

&lt;p align=&quot;center&quot; style=&quot;font-size:small&quot;&gt;hero image by &lt;a href=&quot;https://unsplash.com/@_louisreed?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Louis Reed&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/raspberry-pi?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;
&lt;/p&gt;</content><author><name></name></author><category term="programming" /><summary type="html">This article is the second installment of my series on building a wireless thermostat in Rust for the Raspberry Pi. You can find the beginning of the series here. All source code for the project is located here.</summary></entry><entry><title type="html">Raspberry Pi Wireless Thermostat - in Rust</title><link href="https://mikehentges.github.io/rpi-thermostat" rel="alternate" type="text/html" title="Raspberry Pi Wireless Thermostat - in Rust" /><published>2022-10-04T00:00:00-05:00</published><updated>2022-10-04T00:00:00-05:00</updated><id>https://mikehentges.github.io/Rpi-Thermostat</id><content type="html" xml:base="https://mikehentges.github.io/rpi-thermostat">&lt;p&gt;I recently stepped away from the full-time work rat race and found myself with some time on my hands. Being a life-long technologist, I naturally started looking into what new things have come along that I didn’t have time for when consumed by a full-time job.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;Rust&lt;/a&gt; popped up on a short list of new technologies that looked interesting. I started programming in C/C++ on DOS/Windows/Mac/Unix many moons ago – so a new statically typed compiled language that is heralded as the “new C/C++” was a natural choice. Going through the &lt;a href=&quot;https://doc.rust-lang.org/book/&quot;&gt;Rust Book&lt;/a&gt;, I absorbed the concepts pretty quickly – but found myself in that “what next” stage. This is always the most challenging stage when learning new technology – you understand the basics but don’t know where to start to build something “real.”&lt;/p&gt;

&lt;p&gt;In search of a solution to this problem, I ran across an excellent book by Luca Palmieri: &lt;a href=&quot;https://www.zero2prod.com/&quot;&gt;Zero to Production in Rust&lt;/a&gt;. The book walks through the building of a non-trivial, production-quality web application in Rust. Many useful concepts are built out and illustrated, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Building a production-quality web server application in Rust.&lt;/li&gt;
  &lt;li&gt;Telemetry – getting traces/logs distributed to a central location and managing error handling across several different API stacks.&lt;/li&gt;
  &lt;li&gt;Implementing end-user authentication – production-grade user authentication, including encryption and protection from common hacking methods.&lt;/li&gt;
  &lt;li&gt;SQL interaction – Postgres, in this case, including migrations.&lt;/li&gt;
  &lt;li&gt;External API usage – calling external REST-based services.&lt;/li&gt;
  &lt;li&gt;HTML templates – producing web pages for end-user interaction from a server.&lt;/li&gt;
  &lt;li&gt;Session management – Redis in this case, but a strategy for keeping track of end-user state.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After working through the book, I felt I had a decent handle on how this stuff works. As a bonus, I haven’t done a lot of production-level web server development in other languages – and seeing the normal challenges in this environment solved was interesting. But I’ve never claimed to be proficient in a tool until I’ve used it to build something. About this time, an outside inspiration popped up – I wanted a way to control a thermostat in a detached workshop remotely. The heater for my workshop is a simple 2-wire control – not nearly as complicated as a home furnace. A &lt;a href=&quot;https://store.google.com/us/product/nest_learning_thermostat_3rd_gen?pli=1&amp;amp;hl=en-US&quot;&gt;Google Nest&lt;/a&gt; is overkill, I’ve done some programming for Arduino and Raspberry Pi devices in the past, so this project was born.&lt;/p&gt;

&lt;p&gt;In laying out the architecture for my new project, I decided on the following initial scope:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I’m only worried about heating – so a single control and simplified logic for either turning on the heat or turning it off.&lt;/li&gt;
  &lt;li&gt;For the main control platform, the Raspberry Pi is an easy choice. It runs a Unix OS, has Wi-Fi networking support, and has easy access to the physical devices needed for temperature measurement and relays to work as a thermostat.&lt;/li&gt;
  &lt;li&gt;I would use Rust as the development language and take advantage of the following Rust features:
    &lt;ol type=&quot;a&quot;&gt;
 &lt;li&gt;Cross-compile to a native executable (ARM processor).&lt;/li&gt;
 &lt;li&gt;Use the Actix-Web framework to expose REST interfaces for remotely setting the thermostat and retrieving the current temperature.&lt;/li&gt;
 &lt;li&gt;Utilize the Tokio run time for a multi-threaded application that can read temperatures, decide whether to turn the thermostat on or off, receive commands to set the thermostat, and send data externally.&lt;/li&gt;
 &lt;li&gt;Gain programmatic access to physical devices on the Raspberry Pi for reading temperature and controlling a relay to turn the heater on or off.&lt;/li&gt;&lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;I wanted external visibility into how the thermostat was working. I decided to push data to the cloud instead of keeping it on the device so that an external “watcher” can send an alarm if something isn’t working correctly. I wouldn’t want a thermostat not to turn on when it’s supposed to (freezing things is bad) or stay on too long (100 degrees is also bad and a potential fire hazard).&lt;/li&gt;
  &lt;li&gt;I chose a REST interface for controlling the thermostat – making it easy to connect something to it later. I might make a Flutter app for my phone (more new things to figure out!) or a web interface.&lt;/li&gt;
  &lt;li&gt;I chose to address security through physical network access and firewalls and not implement a security layer on the API. I am saving implementing security for the 2.0 version, which keeps the initial development cleaner and easier.&lt;/li&gt;
  &lt;li&gt;I would follow the main principles from Zero to Production in organizing the project and utilize many of the same external Rust packages. I liked the coding style and choices made in the book and consider it a best practices reference.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I intended this to be a hobby project – not a commercial production-ready implementation. When I install this for actual use, I will have a backup system to ensure nothing bad happens. Things work in the project’s current state – but I don’t profess to have the system hardened. More testing is needed before I’ll trust this with anything important.&lt;/p&gt;

&lt;p&gt;The following diagram depicts the system architecture for the solution:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dbzsk4ytb/image/upload/c_scale,w_800/v1664843918/blog-images/sys-arch.drawio_rrv2ju.png&quot; alt=&quot;DTMF IVR&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The subsystems of the application are as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Shared Data&lt;/strong&gt; – This holds the current state of the application and is accessed from the other subsystems as needed. Each subsystem runs on independent threads, so we wrap the shared data to protect it when multiple threads try to read/set its data independently.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Web (HTTP) Interface&lt;/strong&gt; – We run an actix-web server, allowing for multiple HTTP clients. This interface allows external access to the thermostat – giving it the “wireless” functionality we desire. These interfaces enable setting the thermostat value (the desired minimum temperature) and retrieving the current temperature and thermostat setting.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Read Current Temperature&lt;/strong&gt; – An independent thread polls the temperature sensor periodically. Each time it reads a temperature value, it changes the internal state and then pushes those values to the external cloud storage.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Set Thermostat&lt;/strong&gt; – Another independent thread polls the Shared Data to see if the thermostat should be on or off. When the temperature is below the thermostat value, the external control relay is set on – else, it is set off. A minimum time on/off threshold avoids thrashing, so we store the control relay change time in the Shared Data, which becomes part of the logic for determining the relay state.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Telemetry&lt;/strong&gt; – All tracing and error messages are funneled through a Telemetry layer and pushed to an external collector for visibility.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cloud Data Storage&lt;/strong&gt; – We’re using AWS as our cloud provider and utilizing a Lambda function (written in Rust!) to receive HTTP messages from the application and store them in a DynamoDB table for external processing. The cloud database is our repository of historical information on how the temperature and thermostat settings have changed over time. Eventually, a monitor against this data will alert us if something goes wrong.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;End-User UI&lt;/strong&gt; – We need a way to control the thermostat and see its current state. This UI interacts with the application via HTTP to get/set data. It also can retrieve historical data from the cloud for display.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The GitHub link for the source code is &lt;a href=&quot;https://github.com/mikehentges/thermostat-pi&quot;&gt;here&lt;/a&gt;. I’m still fiddling with things and working on a GUI client. I plan on diving into the details of the application in a series of follow-on posts – follow me to get an update when the next in the series is published.&lt;/p&gt;

&lt;p align=&quot;center&quot; style=&quot;font-size:small&quot;&gt;hero image by &lt;a href=&quot;https://unsplash.com/@jainath?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Jainath Ponnala&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/raspberry-pi?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;
&lt;/p&gt;</content><author><name></name></author><category term="programming" /><summary type="html">I recently stepped away from the full-time work rat race and found myself with some time on my hands. Being a life-long technologist, I naturally started looking into what new things have come along that I didn’t have time for when consumed by a full-time job.</summary></entry><entry><title type="html">Real Advantages of AI</title><link href="https://mikehentges.github.io/ai-advantages" rel="alternate" type="text/html" title="Real Advantages of AI" /><published>2022-10-03T00:00:00-05:00</published><updated>2022-10-03T00:00:00-05:00</updated><id>https://mikehentges.github.io/AI-Advantages</id><content type="html" xml:base="https://mikehentges.github.io/ai-advantages">&lt;h1 id=&quot;whats-the-real-advantage-of-ai-driven-technology-in-the-contact-center&quot;&gt;What’s the real advantage of AI-driven technology in the Contact Center?&lt;/h1&gt;

&lt;p&gt;As I watch the contact center industry promote everything and anything AI, I’m surprised at how often AI’s benefits are drastically misrepresented. I see and hear many discussions of the benefits of AI that are arguments for automation – with no mention of specific AI benefits over other forms of automation. “Decrease costs, make customers happy” are claims that seem too good to be true and don’t provide much information on what about AI enables that to happen.&lt;/p&gt;

&lt;p&gt;AI-based systems, when appropriately utilized, have tangible benefits, especially when compared to the older speech-recognition-based IVR systems (or, heaven forbid, touch-tone DTMF systems), they are replacing. But I feel we are doing a disservice to AI when we don’t describe how the AI part makes the system better.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;https://res.cloudinary.com/dbzsk4ytb/image/upload/c_scale,h_300/v1664816102/blog-images/dtmf-ivr_qlupkt.svg&quot; alt=&quot;DTMF IVR&quot; height=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First, let me share a little history. IVR (Interactive Voice Response) is a technology that has been around for 40 years. At first, these systems accepted touch-tone (DTMF) input, the ubiquitous “press 1 for sales, 2 for customer service….” call directing systems that replaced human operators. Then, the systems allowed data entry over the phone (“enter your account number…”). Back-end data transactions (screen-scraping mainframe terminal screens at first, then more modern API methods) would pull data to the caller for self-service (“your current balance is …”). The return on investment for these systems was straightforward: $5.00 per minute for a human agent interaction vs. $.25 per minute for an IVR interaction (typical costs in the 1990s). If you could automate a high enough percentage of calls, the IVR systems would pay for themselves in months.&lt;/p&gt;

&lt;p&gt;Some industries, like retail banking, could see call automation rates over 90%. The cost avoidance potential made IVR systems must-have tools for call centers. They were great at cost reduction – but terrible for customer service. The complexity of end-user needs pushed against the limits of the technology – trees of menus sprouted everywhere, and the term “IVR Hell” came to be known.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;https://res.cloudinary.com/dbzsk4ytb/image/upload/c_scale,h_300/v1664814373/blog-images/Speech_Recognition_xtxpru.svg&quot; alt=&quot;Speech Recognition&quot; height=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next major step forward was the advent of speech recognition technology. Instead of requiring callers to press buttons, systems could accept spoken input. Speech recognition technology had its limitations: allowing a wide variety of inputs required speech systems trained to a single voice. Dictation-type systems where you could talk instead of type could use this technology, but not in call centers. Speech recognition technology could recognize speech input from a general population only if a small number of specific words were allowed as input. As technology progressed, the number of different words the system could match against the input increased – but it always had some upper limit.&lt;/p&gt;

&lt;p&gt;“Grammar” was the term used to define the permitted words at any speech input state. These “directed dialog” IVR systems would use these grammars when prompting for input, collect that information from the caller, and then go to the next input step. If the caller speaks one of the allowed words, the input is accepted – otherwise, the common “I’m sorry I didn’t get that” is spoken to get the caller to try again.&lt;/p&gt;

&lt;p&gt;Allowing speech input was an improvement over DTMF-only IVR systems. System designers could develop natural speech input patterns, especially for “form filling” use cases where multiple data elements were needed to complete a transaction. Caller acceptance was higher than with DTMF-only systems. But, technology acquisition, development, and upkeep costs could be three times higher than a DTMF-only system – and the technical limitations still frustrated callers. These IVR systems still forced callers to figure out how to get through the prompts – to put their problems into words the system designer used. Well-designed systems made that more manageable – but too many systems struggled to provide a good user experience.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;https://res.cloudinary.com/dbzsk4ytb/image/upload/c_scale,h_300/v1664816458/blog-images/AdobeStock_183299703_uhku4a.jpg&quot; alt=&quot;Chatbot&quot; height=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So this brings us to where AI became involved. Two distinct industry trends converged, bringing AI-powered systems to the contact center. The first was web chat: pop-up boxes on websites connected users to live human agents. These systems were a hit with both end users and businesses, and web chat quickly overtook email as the primary channel for text-based communication in the Contact Center. Companies quickly recognized the need for automation of these interactions, the all-text communication path was straightforward and cheap to build, and the “dumb chatbot” was born. A desire to create better automated text interactions drove the adoption of AI systems with our first describable advantage of AI systems used in the contact center.&lt;/p&gt;

&lt;h3 id=&quot;ai-systems-can-define-meaning-from-human-conversations&quot;&gt;AI systems can define meaning from Human Conversations.&lt;/h3&gt;

&lt;p&gt;For our AI-driven chatbots, end users could ask their questions the same way they would if they were typing their questions to a human agent. The AI-powered system could pull the meaning out of the conversation without restricting the input to a specific form or grammar. That meaning usually takes the form of the “intent” of the interaction, plus any “entities” contained within the conversation. “What’s the current balance of my checking account” yields an intent of “current balance” and an entity of “checking account.” With that meaning pulled out of the interaction, an automated system has the information it needs to respond correctly. A trained AI system demonstrates its value by being more robust and accurate than hand-coded word-spotting or other rules-based algorithms without restrictions or “guidance” from the system on the input. The user interacts naturally, and the AI system figures it out.&lt;/p&gt;

&lt;p&gt;The use of AI is not magic -  a system will have a pre-defined set of intents it can react to (you don’t expect a banking system to be able to collect information needed to order a pizza…). But, it allows for a more natural interface for the end user and a more accurate and easily maintainable system for the business.&lt;/p&gt;

&lt;p&gt;Now that we have AI-based technology for understanding human conversation happening over a text channel, the 2nd advantage of AI technology for contact centers is applicable.&lt;/p&gt;

&lt;h3 id=&quot;ai-based-speech-to-text-speech-recognition-technology-provides-a-reliable-and-efficient-means-to-turn-human-speech-into-corresponding-text-contact-centers-can-then-use-ai-based-text-processing-tools-to-determine-the-meaning-of-voice-interactions&quot;&gt;AI-based speech-to-text (speech recognition) technology provides a reliable and efficient means to turn human speech into corresponding text. Contact Centers can then use AI-based text processing tools to determine the meaning of voice interactions.&lt;/h3&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;https://res.cloudinary.com/dbzsk4ytb/image/upload/c_scale,h_300/v1664816683/blog-images/AdobeStock_331733490_Editorial_Use_Only_vhhql9.jpg&quot; alt=&quot;Amazon Echo&quot; height=&quot;300&quot; /&gt;&lt;br /&gt;Anthony Brown - stock.adobe.com&lt;/p&gt;

&lt;p&gt;Amazon’s Alexa was the first widely used, commercially successful speech input system that utilized new AI-driven technology to break the boundaries of previous speech recognition systems. Amazon’s Echo devices used a combination of advanced microphone technology with an AI-backed recognition engine to pull actionable intents out of end-user inputs in a way that previous phone-based systems could not. Several vendors quickly made this technology available for phone-based interactions (including Amazon!), and it is now the new standard toolset for applying automation to the contact center.&lt;/p&gt;

&lt;p&gt;Like with text, once systems can understand the meaning of a customer inquiry, automation tools provide a means to assist with completing the interaction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So, in summary, here are the key benefits of AI technology for the Contact Center:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;AI tools programmatically (without human intervention) determine the intent or purpose of a customer’s interaction over voice or text using a natural interface that does not hinder the customer.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Contact Centers can use this understanding of the customer to apply automation wherever customer communication is in text or voice. Contact Centers are using this automation successfully at several touchpoints, including:&lt;/strong&gt;&lt;/p&gt;

    &lt;ol type=&quot;a&quot;&gt;
&lt;li&gt;&lt;b&gt;Automating a request before it reaches an agent.&lt;/b&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Assisting an agent by “listening in” on the interaction and providing cues to the agent.&lt;/b&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Automating post-call notes or analyzing completed interactions for quality.&lt;/b&gt;&lt;/li&gt;&lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The AI-based systems that do this work are less expensive to build, implement, and maintain –  and are more accurate than their predecessors.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;AI excels for use cases where your business needs to figure out what your customer is trying to accomplish when they contact you without alienating them by asking 20 questions. And while it does provide a more economical way to utilize speech input for phone-based systems, it doesn’t measurably help you with simple data capture tasks such as collecting an account number. Recognizing where AI provides leverage to your use cases can help you make more informed vendor selections for tools and services.&lt;/p&gt;

&lt;p&gt;Enabling automation is still the core of helping Contact Centers work more efficiently. Using the best tools to build that automation allows systems to perform their automated tasks in the most customer-pleasing way. And systems pleasing to the end user get used more and detract less from the customer experience. Recognize AI for what it is – a tool for building better automation. By itself, it doesn’t do anything.&lt;/p&gt;

&lt;p&gt;Need additional help? I can provide services to assist in use case development, vendor selection, and implementation guidance. Please reach out!&lt;/p&gt;</content><author><name></name></author><category term="ai" /><summary type="html">What’s the real advantage of AI-driven technology in the Contact Center?</summary></entry><entry><title type="html">Creating a new blog with Jekyll and GitHub Pages</title><link href="https://mikehentges.github.io/blog-creation" rel="alternate" type="text/html" title="Creating a new blog with Jekyll and GitHub Pages" /><published>2022-08-20T00:00:00-05:00</published><updated>2022-08-20T00:00:00-05:00</updated><id>https://mikehentges.github.io/blog-creation</id><content type="html" xml:base="https://mikehentges.github.io/blog-creation">&lt;p&gt;Even though I’ve been in software development for almost my whole career, I’ve never had the chance to build a website
from scratch. I’ve created a WordPress site before - but that hardly counts as programming!&lt;/p&gt;

&lt;h3 id=&quot;getting-started-on-my-journey&quot;&gt;Getting Started on My Journey&lt;/h3&gt;

&lt;p&gt;So when it came time to create a personal blog, I dove in head-first and learned a bunch of new things. Initially, I ran
across &lt;a href=&quot;https://jamstack.org/&quot;&gt;Jamstack&lt;/a&gt; as a new way of building static sites. Jamstack seemed like a much better
technology stack for what I wanted to create than WordPress.&lt;/p&gt;

&lt;p&gt;At first, I shied away from &lt;a href=&quot;https://en.wikipedia.org/wiki/Markdown&quot;&gt;markdown&lt;/a&gt; for content creation. While I had
used &lt;a href=&quot;https://slack.com/&quot;&gt;Slack&lt;/a&gt; for instant messaging, which utilizes markdown, I wasn’t sure I would have enough
formatting control for a blog site. This reluctance led me to the idea of a headless CRM for content creation and a site
generator to pull from the CRM to create the pages.&lt;/p&gt;

&lt;h3 id=&quot;the-first-attempt&quot;&gt;The first attempt&lt;/h3&gt;

&lt;p&gt;My initial technology stack utilized &lt;a href=&quot;https://ghost.org/&quot;&gt;Ghost&lt;/a&gt; for CRM and &lt;a href=&quot;https://www.gatsbyjs.com/&quot;&gt;Gatsby&lt;/a&gt; as the
site generator. Ghost’s page editor is great - easy to use and powerful. But, the connection between Ghost and Gatsby
was a little clunky. I also struggled with the formatting and structure I wanted. I didn’t have a solid background in
HTML and CSS, which made the jump to learning &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; difficult.&lt;/p&gt;

&lt;p&gt;After spinning my wheels for a while, I eventually just pulled out Gatsby and went with a pure Ghost site. Controlling
the layout was more manageable, and I could make a structure I was happy with - pushing the site through Gatsby didn’t
add much value.&lt;/p&gt;

&lt;p&gt;But now I needed a server up 24x7. I spun up a Ghost instance on &lt;a href=&quot;https://aws.amazon.com/lightsail/&quot;&gt;AWS/Lightsail&lt;/a&gt;,
moved my domain to &lt;a href=&quot;https://aws.amazon.com/route53/&quot;&gt;AWS/Route 53&lt;/a&gt;, and connected the pieces. Everything worked great,
but I had monthly bills and a more complex stack than necessary for a simple site like this blog.&lt;/p&gt;

&lt;h3 id=&quot;the-second-try---progress&quot;&gt;The second try - progress!&lt;/h3&gt;

&lt;p&gt;After some more research, I ran across &lt;a href=&quot;https://pages.github.com&quot;&gt;GitHub Pages&lt;/a&gt;. It offers free hosting within extremely
generous usage patterns. GitHub Pages uses &lt;a href=&quot;https://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; as a site generator - getting me back to a
more Jamstack approach to building the site. As a developer, I already have a &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt; account and
am familiar with &lt;a href=&quot;https://git-scm.com&quot;&gt;git&lt;/a&gt;, so pushing updates to GitHub to update the website was reasonable.&lt;/p&gt;

&lt;p&gt;But I wanted a layout that wasn’t immediately available as a Jekyll theme. So, it was time to fix my lack of depth in
HTML and CSS and design a site! Using the layout of my prior Ghost site as a template, I eventually figured out the
right combination of HTML, CSS, Jekyll templates, and a little Javascript to put the site together. You can find all the
pieces I put together in my site’s repository
at: &lt;a href=&quot;https://github.com/mikehentges/mikehentges.github.io&quot;&gt;https://github.com/mikehentges/mikehentges.github.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the end, markdown is more than adequate as a content creation tool. Once I figured out how the Jekyll templates
worked, I could easily use CSS to format blog entries and pages the way I wanted. I can run the whole site locally under
Jekyll, so iterative development is easy. And the automatic push to Github to publish the site works great.&lt;/p&gt;

&lt;h3 id=&quot;some-jekyll-tipstricks&quot;&gt;Some Jekyll tips/tricks&lt;/h3&gt;

&lt;p&gt;I did have to solve a few problems before I had everything working. I wanted a dynamic navigation menu that showed
categories of posts on the site. I didn’t want to have to re-code the Html for the menu when categories changed and
instead drove it dynamically out of a data file. Jekyll has a great set of available plug-ins for doing different
things (&lt;a href=&quot;https://github.com/planetjekyll/awesome-jekyll-plugins&quot;&gt;Awesome Jekyll Plugins&lt;/a&gt;). I found
the &lt;a href=&quot;https://github.com/ashmaroli/jekyll-data&quot;&gt;Jekyll Data&lt;/a&gt; plug-in for reading data files and using them dynamically
in templates. I created a straightforward &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;categories.yml&lt;/code&gt; file and used it for the main navigation menu.&lt;/p&gt;

&lt;p&gt;Everything worked great locally, but I ran into problems when I pushed it to GitHub. GitHub Pages runs in a safe mode
and has a set of allowed plug-ins – it does not natively support the Jekyll Data plug-in. So when I pushed my site to
GitHub, it wouldn’t generate the static site correctly. Fortunately, a custom GitHub
action, &lt;a href=&quot;https://github.com/jeffreytse/jekyll-deploy-action&quot;&gt;Jekyll Deploy Action&lt;/a&gt;, solves this problem. The Jekyll
Deploy Action allows you to set up a custom GitHub Actions build environment with Jekyll and any plug-ins you’d like to
add. I added the right &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;./.github/workflows/build-jekyll.yml&lt;/code&gt; file to trigger the GitHub Actions on an update to the
main branch. So now the sequence is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I commit my new/changed markup files. &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;git commit -m 'some new changes…'&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;I push the changes to GitHub. &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;git push&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;A GitHub Action triggers, creating a Jekyll run-time environment with the plug-ins I want/need all installed.&lt;/li&gt;
  &lt;li&gt;A set of generated static files (.html, .css, .js) and any file artifacts are put in the repository’s gh-pages branch
by the GitHub Action.&lt;/li&gt;
  &lt;li&gt;GitHub pages deploy the generated files, and the updated site is active!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Jekyll uses the liquid template language &lt;a href=&quot;https://shopify.github.io/liquid/&quot;&gt;https://shopify.github.io/liquid/&lt;/a&gt; to drive
the data substitution needed to create the static files from the collection of data and markup files. Mainly it involves
simple data substitution, using handlebars to place data elements within the Html files, &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;{{site.title}}&lt;/code&gt; for example. Programmatic control is also available, so you can iterate over a collection to create things
like a list of posts. My home page has three cards for the most recent posts on the site. To make each one, I had to
find the correct syntax to iterate over the posts – but only three times. The syntax to do that is:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;    {% for post in site.posts limit:3 %}
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        repeating data goes here, 
        like {{post.content}}
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    {% endfor %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;end-result&quot;&gt;End Result&lt;/h3&gt;

&lt;p&gt;I now have a very lightweight and fast-loading site. Jekyll builds everything as static files. I only have a short
javascript routine for reacting to a mouse click on the front page cards. Everything else published for the site is Html
or CSS files that load very quickly. All the content and formatting are under my control to update or change. Learning
Jekyll, HTML, and CSS has been a nice side-effect of the journey, and I think I’m in a better spot to go back and tackle
React one day.&lt;/p&gt;

&lt;p&gt;If you are contemplating putting together a blog or are working towards creating a Jekyll site, I hope the information
here is helpful.&lt;/p&gt;</content><author><name></name></author><category term="programming" /><summary type="html">Even though I’ve been in software development for almost my whole career, I’ve never had the chance to build a website from scratch. I’ve created a WordPress site before - but that hardly counts as programming!</summary></entry><entry><title type="html">Google DialogFlow – capturing numbers with voice</title><link href="https://mikehentges.github.io/gdf-capture-numbers" rel="alternate" type="text/html" title="Google DialogFlow – capturing numbers with voice" /><published>2022-08-12T00:00:00-05:00</published><updated>2022-08-12T00:00:00-05:00</updated><id>https://mikehentges.github.io/GDF-capture-numbers</id><content type="html" xml:base="https://mikehentges.github.io/gdf-capture-numbers">&lt;p&gt;The following is my experience working with Google DialogFlow in a voice environment, and the seemingly simple task of capturing long strings of numbers correctly.&lt;/p&gt;

&lt;h3 id=&quot;dialogflow-overview&quot;&gt;DialogFlow Overview&lt;/h3&gt;

&lt;p&gt;Google’s DialogFlow environment is a great place to build natural-language understanding applications that automate both text-based (“chatbot”) and voice-based interactions. All of the voice-enabled AI environments in wide use today (Google’s DialogFlow, IBM’s Watson Assistant, and Amazon’s Lex are the big 3) enable voice communications by going through a 3-step process, where spoken input is first transcribed to text by a speech-to-text engine (STT), then given to a bot for analysis, and then sent through a text-to-speech (TTS) engine to produce audio back to the user.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dbzsk4ytb/image/upload/v1661032747/blog-images/gdf/clip_image002_ukbykr.png&quot; alt=&quot;Google DialogFlow Diagram&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;voice-is-not-text&quot;&gt;Voice is not text!&lt;/h3&gt;

&lt;p&gt;In theory, having a common AI assistant that supports both voice and text inputs allows for a plug-and-play extension of a bot – a chatbot that is handling text-based questions from users can be extended to voice inputs without having to redesign, and redevelop the chatbot. And for simple, proof-of-concept style interactions, this is true. But text and voice have significant differences, and adjusting the design of the interaction to match the mode of input can make a measurable impact on the success of the application.&lt;/p&gt;

&lt;p&gt;And, the speech-to-text process often introduces unique challenges. One area where this is evident is for the task of collecting numeric input. For a recent project, we required a voice-enabled Google DialogFlow voice interaction to collect a 16-digit account number from a user. A regular expression entity does this for a text-enabled chatbot:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;https://res.cloudinary.com/dbzsk4ytb/image/upload/v1661032747/blog-images/gdf/clip_image004_msmuub.png&quot; width=&quot;75%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A simple regular expression works great for capturing the typical “1234567890123456” style input that chat users would enter. In practice, Google’s STT engine provides input in other formats, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;“1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6”&lt;/strong&gt; – spaces in between digits&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“one two three four five six seven eight nine zero one two three four five six”&lt;/strong&gt; – words&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“1 2 three four 5 six 7 8 9 zero one two 3 4 five 6”&lt;/strong&gt; – my favorite, a mix of digits and words!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“1234567890123456”&lt;/strong&gt; – same as the text-based input&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is documented by Google, &lt;a href=&quot;https://cloud.google.com/dialogflow/docs/entities-regexp#special_handling_for_speech_recognition&quot;&gt;special_handling_for_speech_recognition&lt;/a&gt;, but the documentation fails to describe the mixed-mode input format as possible. Also, a regular expression entity does not enable Auto speech adaptation – a very important capability where the STT engine can work better if it knows what it’s looking for from the intents and entities that are active.&lt;/p&gt;

&lt;p&gt;The following steps can be used to solve this problem and all similar numeric data input requirements on Google’s DialogFlow platform:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Ensure Speech Adaptation is enabled. In the “Speech and IVR” settings for the agent, speech adaptation needs to be turned on:
&lt;img class=&quot;center&quot; src=&quot;https://res.cloudinary.com/dbzsk4ytb/image/upload/v1661032748/blog-images/gdf/speech_adaptation_nicnie.png&quot; width=&quot;75%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create an Entity for capturing single digits (0-9), along with the corresponding words (zero-nine) as synonyms. In this example that Entity is named “Number_0_9”:
&lt;img class=&quot;center&quot; src=&quot;https://res.cloudinary.com/dbzsk4ytb/image/upload/v1661032747/blog-images/gdf/clip_image012_ditisu.png&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Create an entity for your specific use case for the number of digits that need to be captured. In this example, we have a 4-digit number use case. There is a space in-between each value in the screenshot below. A word of caution, this compound entity preserves the initial input text. An input of “one two 3 4” will provide you a match of “one two 3 4” (not the 1 2 3 4 that you would expect) – you will need to handle this either in your application or in fulfillment. Compound entities like this do not translate input synonyms to a common format like a plain entity would (this may be fixed in future updates by Google).
&lt;img class=&quot;center&quot; src=&quot;https://res.cloudinary.com/dbzsk4ytb/image/upload/v1661032748/blog-images/gdf/clip_image014_fztc5e.png&quot; width=&quot;75%&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Create a regular expression entity for the case of a contiguous string of digits:
&lt;img class=&quot;center&quot; src=&quot;https://res.cloudinary.com/dbzsk4ytb/image/upload/v1661032748/blog-images/gdf/clip_image015_m0lrlc.png&quot; width=&quot;75%&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Either create two intents (one for each entity type, which is what we did), or a single intent with both entity types available and use fulfillment to provide the matched value back to the user. Your application’s flow will dictate how you craft the intent(s) that utilize the entities correctly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Lastly, we can give the STT engine an additional performance boost by letting it know that we are collecting digits. A class token of $OOV_CLASS_DIGIT_SEQUENCE will let the STT engine’s speech adaptation module know it should process input as a string of digits and produces dramatically improved results. Google documents how to set this class token here: &lt;a href=&quot;https://cloud.google.com/speech-to-text/docs/speech-adaptation#class_tokens&quot;&gt;class_tokens&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By following this process, our phone-based solution is capturing the caller’s 16-digit account number very reliably – at least as well as the traditional non-AI IVR application that it replaced.&lt;/p&gt;</content><author><name></name></author><category term="ai" /><summary type="html">The following is my experience working with Google DialogFlow in a voice environment, and the seemingly simple task of capturing long strings of numbers correctly. DialogFlow Overview Google’s DialogFlow environment is a great place to build natural-language understanding applications that automate both text-based (“chatbot”) and voice-based interactions. All of the voice-enabled AI environments in wide use today (Google’s DialogFlow, IBM’s Watson Assistant, and Amazon’s Lex are the big 3) enable voice communications by going through a 3-step process, where spoken input is first transcribed to text by a speech-to-text engine (STT), then given to a bot for analysis, and then sent through a text-to-speech (TTS) engine to produce audio back to the user. Voice is not text! In theory, having a common AI assistant that supports both voice and text inputs allows for a plug-and-play extension of a bot – a chatbot that is handling text-based questions from users can be extended to voice inputs without having to redesign, and redevelop the chatbot. And for simple, proof-of-concept style interactions, this is true. But text and voice have significant differences, and adjusting the design of the interaction to match the mode of input can make a measurable impact on the success of the application. And, the speech-to-text process often introduces unique challenges. One area where this is evident is for the task of collecting numeric input. For a recent project, we required a voice-enabled Google DialogFlow voice interaction to collect a 16-digit account number from a user. A regular expression entity does this for a text-enabled chatbot: A simple regular expression works great for capturing the typical “1234567890123456” style input that chat users would enter. In practice, Google’s STT engine provides input in other formats, including: “1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6” – spaces in between digits “one two three four five six seven eight nine zero one two three four five six” – words “1 2 three four 5 six 7 8 9 zero one two 3 4 five 6” – my favorite, a mix of digits and words! “1234567890123456” – same as the text-based input This is documented by Google, special_handling_for_speech_recognition, but the documentation fails to describe the mixed-mode input format as possible. Also, a regular expression entity does not enable Auto speech adaptation – a very important capability where the STT engine can work better if it knows what it’s looking for from the intents and entities that are active. The following steps can be used to solve this problem and all similar numeric data input requirements on Google’s DialogFlow platform: Ensure Speech Adaptation is enabled. In the “Speech and IVR” settings for the agent, speech adaptation needs to be turned on: Create an Entity for capturing single digits (0-9), along with the corresponding words (zero-nine) as synonyms. In this example that Entity is named “Number_0_9”: Create an entity for your specific use case for the number of digits that need to be captured. In this example, we have a 4-digit number use case. There is a space in-between each value in the screenshot below. A word of caution, this compound entity preserves the initial input text. An input of “one two 3 4” will provide you a match of “one two 3 4” (not the 1 2 3 4 that you would expect) – you will need to handle this either in your application or in fulfillment. Compound entities like this do not translate input synonyms to a common format like a plain entity would (this may be fixed in future updates by Google). Create a regular expression entity for the case of a contiguous string of digits: Either create two intents (one for each entity type, which is what we did), or a single intent with both entity types available and use fulfillment to provide the matched value back to the user. Your application’s flow will dictate how you craft the intent(s) that utilize the entities correctly. Lastly, we can give the STT engine an additional performance boost by letting it know that we are collecting digits. A class token of $OOV_CLASS_DIGIT_SEQUENCE will let the STT engine’s speech adaptation module know it should process input as a string of digits and produces dramatically improved results. Google documents how to set this class token here: class_tokens. By following this process, our phone-based solution is capturing the caller’s 16-digit account number very reliably – at least as well as the traditional non-AI IVR application that it replaced.</summary></entry><entry><title type="html">Why I Play Chess</title><link href="https://mikehentges.github.io/why-i-play-chess" rel="alternate" type="text/html" title="Why I Play Chess" /><published>2022-06-03T00:00:00-05:00</published><updated>2022-06-03T00:00:00-05:00</updated><id>https://mikehentges.github.io/why-i-play-chess</id><content type="html" xml:base="https://mikehentges.github.io/why-i-play-chess">&lt;p&gt;Chess is a game that is centuries old, originating in western Europe in the 1400s. But despite it’s age, it is currently
played every day by thousands of people across the world. Current fad, or local customs often influence which games kids
learn - but chess is present in almost every global culture. Chess is usually introduced to kids as another game to
play - kids play lots of games! But chess’s widespread and seemingly never-ending popularity demonstrate that it ends up
being so much more than that.&lt;/p&gt;

&lt;p&gt;Chess isn’t like most games. I’ve played lots of games - they were a staple of my childhood. But only Chess has captured
my attention for decades and still is something I play/compete daily. And I’m not alone! There are many reasons why
chess is one of the most popular games after over 800 years since its creation:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Chess is a contest with complete information. The pieces are visible on the board - nothing hidden or left to chance.
You don’t outplay your opponent for the entire game only to have them get lucky and roll double-sixes and escape with
a win at the last minute (darn you backgammon!). This makes Chess the ultimate “fair game” - your opponent doesn’t
get better cards, or better rolls.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Whoever plays the game better, wins. Luck is not part of the game. There is no reason, other than your lack of
ability, for not winning a game.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There are swindles, surprises, things that happen that you don’t expect. At least for us mere mortals, with an
incomplete ability to foresee all that is to come, there is a feeling of suspense for most of the game for “what will
happen?” Chess is so complicated, that no human can figure it out completely. There is always an unknown future that
requires you to find a path to reach success.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Chess as an artistic beauty to it. The way pieces interact and combine thier individual powers into a seemless whole
fascinates players. Surprising combinations where pieces are sacrificed to achieve a greater goal - especially when
the all-powerful queen is given up to acheive check-mate - add to the beauty of chess..&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Knowledge is power. You can study chess, and learn ways to play that give you a distinct advantage over others. A
notation system devised for chess makes it possible to record and review past games. Recorded games between the great
champions of the past are available for anyone to review. Thousands of books on chess have been published, and cover
all aspects of the game.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’m always competing - either against someone else, or against myself (trying to get better). Chess has been a great
outlet for this for me, and thousands of others.&lt;/p&gt;</content><author><name></name></author><category term="chess" /><summary type="html">Chess is a game that is centuries old, originating in western Europe in the 1400s. But despite it’s age, it is currently played every day by thousands of people across the world. Current fad, or local customs often influence which games kids learn - but chess is present in almost every global culture. Chess is usually introduced to kids as another game to play - kids play lots of games! But chess’s widespread and seemingly never-ending popularity demonstrate that it ends up being so much more than that.</summary></entry></feed>